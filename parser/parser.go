// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const POSIX_REGEX = 57427
const POSIX_REGEX_CI = 57428
const POSIX_NOT_REGEX = 57429
const POSIX_NOT_REGEX_CI = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const PRIMARY = 57455
const COLUMN = 57456
const CONSTRAINT = 57457
const REFERENCES = 57458
const SPATIAL = 57459
const FULLTEXT = 57460
const FOREIGN = 57461
const KEY_BLOCK_SIZE = 57462
const POLICY = 57463
const WHILE = 57464
const UNIQUE = 57465
const KEY = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const TYPE = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const RESTRICT = 57487
const CASCADE = 57488
const NO = 57489
const ACTION = 57490
const PERMISSIVE = 57491
const RESTRICTIVE = 57492
const PUBLIC = 57493
const CURRENT_USER = 57494
const SESSION_USER = 57495
const PAD_INDEX = 57496
const FILLFACTOR = 57497
const IGNORE_DUP_KEY = 57498
const STATISTICS_NORECOMPUTE = 57499
const STATISTICS_INCREMENTAL = 57500
const ALLOW_ROW_LOCKS = 57501
const ALLOW_PAGE_LOCKS = 57502
const BEFORE = 57503
const AFTER = 57504
const EACH = 57505
const ROW = 57506
const SCROLL = 57507
const CURSOR = 57508
const OPEN = 57509
const CLOSE = 57510
const FETCH = 57511
const PRIOR = 57512
const FIRST = 57513
const LAST = 57514
const DEALLOCATE = 57515
const DEFERRABLE = 57516
const INITIALLY = 57517
const IMMEDIATE = 57518
const DEFERRED = 57519
const CONCURRENTLY = 57520
const BEGIN = 57521
const START = 57522
const TRANSACTION = 57523
const COMMIT = 57524
const ROLLBACK = 57525
const BIT = 57526
const TINYINT = 57527
const SMALLINT = 57528
const SMALLSERIAL = 57529
const MEDIUMINT = 57530
const INT = 57531
const INTEGER = 57532
const SERIAL = 57533
const BIGINT = 57534
const BIGSERIAL = 57535
const INTNUM = 57536
const REAL = 57537
const DOUBLE = 57538
const PRECISION = 57539
const FLOAT_TYPE = 57540
const DECIMAL = 57541
const NUMERIC = 57542
const SMALLMONEY = 57543
const MONEY = 57544
const TIME = 57545
const TIMESTAMP = 57546
const DATETIME = 57547
const YEAR = 57548
const DATETIMEOFFSET = 57549
const DATETIME2 = 57550
const SMALLDATETIME = 57551
const CHAR = 57552
const VARCHAR = 57553
const VARYING = 57554
const BOOL = 57555
const CHARACTER = 57556
const VARBINARY = 57557
const NCHAR = 57558
const NVARCHAR = 57559
const NTEXT = 57560
const UUID = 57561
const TEXT = 57562
const TINYTEXT = 57563
const MEDIUMTEXT = 57564
const LONGTEXT = 57565
const CITEXT = 57566
const BLOB = 57567
const TINYBLOB = 57568
const MEDIUMBLOB = 57569
const LONGBLOB = 57570
const JSON = 57571
const JSONB = 57572
const ENUM = 57573
const GEOMETRY = 57574
const POINT = 57575
const LINESTRING = 57576
const POLYGON = 57577
const GEOMETRYCOLLECTION = 57578
const MULTIPOINT = 57579
const MULTILINESTRING = 57580
const MULTIPOLYGON = 57581
const VARIADIC = 57582
const ARRAY = 57583
const NOW = 57584
const GETDATE = 57585
const BPCHAR = 57586
const TEXT_PATTERN_OPS = 57587
const NULLX = 57588
const AUTO_INCREMENT = 57589
const APPROXNUM = 57590
const SIGNED = 57591
const UNSIGNED = 57592
const ZEROFILL = 57593
const ZONE = 57594
const AUTOINCREMENT = 57595
const DATABASES = 57596
const TABLES = 57597
const VITESS_KEYSPACES = 57598
const VITESS_SHARDS = 57599
const VITESS_TABLETS = 57600
const VSCHEMA_TABLES = 57601
const EXTENDED = 57602
const FULL = 57603
const PROCESSLIST = 57604
const NAMES = 57605
const CHARSET = 57606
const GLOBAL = 57607
const SESSION = 57608
const ISOLATION = 57609
const LEVEL = 57610
const READ = 57611
const WRITE = 57612
const ONLY = 57613
const REPEATABLE = 57614
const COMMITTED = 57615
const UNCOMMITTED = 57616
const SERIALIZABLE = 57617
const NEW = 57618
const CURRENT_TIMESTAMP = 57619
const DATABASE = 57620
const CURRENT_DATE = 57621
const CURRENT_TIME = 57622
const LOCALTIME = 57623
const LOCALTIMESTAMP = 57624
const UTC_DATE = 57625
const UTC_TIME = 57626
const UTC_TIMESTAMP = 57627
const REPLACE = 57628
const CONVERT = 57629
const CAST = 57630
const SUBSTR = 57631
const SUBSTRING = 57632
const GROUP_CONCAT = 57633
const SEPARATOR = 57634
const INHERIT = 57635
const MATCH = 57636
const AGAINST = 57637
const BOOLEAN = 57638
const LANGUAGE = 57639
const WITH = 57640
const WITHOUT = 57641
const PARSER = 57642
const QUERY = 57643
const EXPANSION = 57644
const UNUSED = 57645
const VIRTUAL = 57646
const STORED = 57647
const GENERATED = 57648
const ALWAYS = 57649
const IDENTITY = 57650
const SEQUENCE = 57651
const INCREMENT = 57652
const MINVALUE = 57653
const CACHE = 57654
const CYCLE = 57655
const OWNED = 57656
const NONE = 57657
const CLUSTERED = 57658
const NONCLUSTERED = 57659
const REPLICATION = 57660
const INCLUDE = 57661
const HOLDLOCK = 57662
const NOLOCK = 57663
const NOWAIT = 57664
const PAGLOCK = 57665
const ROWLOCK = 57666
const TABLELOCK = 57667
const TYPECAST = 57668
const CHECK = 57669

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	126, 142,
	-2, 132,
	-1, 36,
	160, 472,
	161, 472,
	-2, 462,
	-1, 272,
	114, 829,
	-2, 825,
	-1, 273,
	114, 830,
	-2, 826,
	-1, 315,
	258, 839,
	-2, 723,
	-1, 347,
	81, 1053,
	-2, 82,
	-1, 348,
	81, 1004,
	-2, 83,
	-1, 354,
	81, 983,
	-2, 796,
	-1, 356,
	81, 1027,
	-2, 798,
	-1, 609,
	258, 839,
	-2, 500,
	-1, 658,
	258, 839,
	-2, 500,
	-1, 687,
	52, 41,
	54, 41,
	-2, 43,
	-1, 848,
	114, 832,
	-2, 828,
	-1, 1105,
	258, 839,
	-2, 500,
	-1, 1126,
	5, 28,
	-2, 621,
	-1, 1152,
	5, 27,
	-2, 769,
	-1, 1200,
	56, 350,
	-2, 347,
	-1, 1260,
	5, 27,
	-2, 90,
	-1, 1496,
	5, 28,
	-2, 770,
	-1, 1597,
	5, 27,
	-2, 772,
	-1, 1766,
	5, 28,
	-2, 773,
	-1, 1921,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 19569

var yyAct = [...]int{
	273, 21, 1873, 1652, 1695, 1612, 1564, 1874, 1739, 1756,
	1655, 535, 1051, 1609, 251, 1728, 53, 778, 613, 612,
	3, 1563, 1189, 1155, 934, 1168, 288, 1506, 1355, 305,
	1502, 1192, 1718, 487, 277, 90, 1385, 952, 90, 268,
	1356, 1352, 1027, 1262, 824, 977, 276, 1215, 681, 1115,
	280, 1773, 679, 983, 1060, 1059, 1221, 255, 976, 607,
	522, 998, 90, 90, 358, 935, 873, 250, 1044, 358,
	1173, 270, 358, 358, 90, 66, 904, 1327, 697, 90,
	1017, 90, 1110, 784, 245, 1039, 993, 90, 899, 1525,
	972, 353, 1118, 1160, 922, 1248, 1818, 850, 541, 931,
	696, 485, 668, 346, 683, 555, 547, 275, 717, 1321,
	1232, 1092, 337, 260, 332, 712, 333, 711, 892, 257,
	636, 48, 26, 27, 349, 339, 1900, 52, 246, 247,
	248, 249, 1011, 1666, 1392, 343, 264, 1507, 1508, 1509,
	1510, 1511, 1512, 28, 334, 563, 1014, 566, 569, 1866,
	579, 579, 608, 581, 582, 583, 584, 585, 586, 587,
	87, 564, 565, 562, 588, 589, 590, 591, 568, 567,
	577, 578, 570, 571, 572, 573, 574, 575, 576, 569,
	1412, 341, 579, 1729, 1398, 488, 489, 1213, 342, 1531,
	570, 571, 572, 573, 574, 575, 576, 569, 1399, 497,
	579, 1857, 1791, 1792, 501, 902, 502, 1539, 1934, 520,
	1838, 1927, 509, 567, 577, 578, 570, 571, 572, 573,
	574, 575, 576, 569, 90, 1764, 579, 1700, 358, 358,
	358, 358, 1850, 358, 1013, 1912, 1699, 1119, 1120, 1052,
	358, 1809, 1672, 572, 573, 574, 575, 576, 569, 1169,
	1837, 579, 1671, 577, 578, 570, 571, 572, 573, 574,
	575, 576, 569, 1486, 534, 579, 627, 358, 1763, 1347,
	1788, 543, 1686, 1490, 499, 1378, 544, 568, 567, 577,
	578, 570, 571, 572, 573, 574, 575, 576, 569, 1470,
	1403, 579, 85, 81, 82, 83, 965, 1667, 1668, 1670,
	1379, 1380, 530, 1669, 1793, 568, 567, 577, 578, 570,
	571, 572, 573, 574, 575, 576, 569, 1469, 1234, 579,
	534, 966, 967, 606, 1226, 594, 1228, 1227, 815, 698,
	1016, 699, 90, 1028, 294, 816, 1018, 1650, 1117, 90,
	90, 90, 1324, 926, 1181, 358, 1586, 1180, 1393, 511,
	1182, 1018, 358, 598, 599, 600, 601, 602, 603, 604,
	1323, 568, 567, 577, 578, 570, 571, 572, 573, 574,
	575, 576, 569, 1479, 1477, 579, 1484, 488, 489, 1856,
	244, 1858, 1932, 580, 580, 1828, 1908, 1040, 1879, 337,
	1487, 1925, 1924, 1909, 1871, 1734, 1654, 1628, 352, 1797,
	1444, 1445, 1320, 491, 1528, 349, 495, 496, 1719, 1926,
	1910, 786, 1757, 1799, 1300, 580, 49, 932, 568, 567,
	577, 578, 570, 571, 572, 573, 574, 575, 576, 569,
	526, 527, 579, 580, 641, 515, 786, 1450, 523, 524,
	525, 642, 528, 785, 994, 1758, 1794, 1401, 1594, 532,
	1533, 1532, 1207, 1451, 1206, 1194, 76, 663, 1905, 580,
	995, 1579, 1391, 1887, 84, 1744, 687, 568, 567, 577,
	578, 570, 571, 572, 573, 574, 575, 576, 569, 1540,
	694, 579, 1460, 1677, 580, 1931, 504, 358, 1849, 493,
	1199, 90, 79, 953, 955, 1212, 1687, 1197, 580, 90,
	1700, 90, 358, 517, 90, 519, 1878, 90, 70, 74,
	1570, 90, 1021, 358, 358, 358, 358, 358, 358, 358,
	358, 1028, 688, 71, 580, 75, 794, 358, 358, 894,
	490, 1172, 90, 1762, 516, 518, 1526, 1527, 1529, 893,
	1171, 72, 73, 68, 1170, 896, 1523, 358, 1041, 776,
	500, 90, 580, 223, 897, 898, 80, 358, 827, 1200,
	1523, 1301, 352, 352, 352, 352, 994, 352, 1916, 895,
	787, 788, 954, 1691, 352, 995, 1795, 1796, 1798, 1800,
	1801, 1499, 995, 710, 1420, 629, 630, 631, 632, 633,
	634, 635, 851, 1309, 1137, 787, 788, 358, 358, 596,
	597, 557, 803, 1104, 78, 358, 79, 822, 580, 701,
	611, 559, 358, 852, 510, 1087, 777, 1745, 1746, 1747,
	847, 819, 801, 554, 790, 1711, 791, 1710, 901, 795,
	1297, 1709, 798, 849, 1133, 909, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 848, 974, 973, 1428, 914, 916, 817, 1305, 829,
	1708, 924, 844, 90, 1707, 580, 90, 90, 90, 90,
	90, 846, 905, 1706, 514, 1705, 836, 1132, 90, 352,
	69, 90, 486, 1703, 1441, 90, 703, 552, 1922, 879,
	90, 90, 915, 1183, 358, 1088, 642, 1158, 876, 936,
	909, 878, 358, 554, 888, 890, 700, 1920, 358, 1429,
	1349, 793, 1923, 923, 580, 1142, 337, 337, 337, 337,
	337, 923, 804, 805, 806, 807, 808, 809, 810, 811,
	920, 337, 1298, 1191, 1296, 1304, 812, 813, 596, 597,
	337, 781, 960, 1627, 1130, 549, 1129, 928, 1299, 492,
	1630, 994, 1613, 1551, 349, 857, 989, 1235, 988, 503,
	990, 991, 971, 553, 552, 1615, 992, 995, 978, 855,
	856, 854, 1191, 1029, 1030, 1031, 1032, 358, 1890, 949,
	554, 358, 937, 358, 90, 940, 90, 958, 933, 957,
	358, 1626, 1203, 90, 77, 90, 963, 962, 90, 358,
	553, 552, 1019, 1020, 1022, 1023, 1024, 1827, 1025, 1026,
	981, 938, 939, 1191, 941, 1774, 961, 554, 553, 552,
	494, 716, 910, 911, 498, 1035, 1036, 1037, 919, 1038,
	1889, 1855, 825, 826, 1775, 554, 352, 1614, 1854, 1094,
	1202, 1131, 1046, 506, 507, 508, 821, 352, 352, 352,
	352, 352, 352, 352, 352, 331, 1042, 1043, 840, 842,
	843, 352, 352, 927, 841, 929, 930, 1851, 1853, 533,
	1190, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 553, 552,
	1776, 831, 820, 847, 851, 1772, 1065, 1704, 50, 553,
	552, 557, 1191, 1550, 352, 554, 1287, 1235, 853, 553,
	552, 1101, 1102, 1103, 358, 852, 554, 1235, 57, 1058,
	1852, 1064, 1640, 1559, 848, 1558, 554, 1408, 1082, 874,
	1083, 875, 1093, 1084, 1255, 534, 1253, 1107, 1108, 1109,
	1593, 889, 889, 59, 60, 61, 62, 63, 50, 891,
	1556, 553, 552, 610, 1116, 1462, 352, 553, 552, 1249,
	1209, 1152, 1106, 1046, 1351, 610, 917, 358, 554, 1701,
	90, 917, 1721, 534, 554, 1288, 1396, 1042, 1043, 1395,
	1290, 1283, 1284, 1394, 1291, 1286, 1285, 358, 553, 552,
	1293, 1289, 1175, 1201, 1177, 1732, 1939, 1520, 1911, 358,
	1055, 1292, 1057, 1601, 1897, 554, 1520, 1862, 1282, 917,
	358, 1520, 1845, 1732, 1844, 1841, 1840, 1861, 1085, 90,
	337, 1184, 1176, 1833, 534, 1611, 1141, 1520, 1830, 1520,
	1829, 1807, 1186, 1601, 1754, 1601, 1637, 1725, 352, 1208,
	1601, 534, 1604, 1603, 1165, 1054, 352, 978, 1225, 887,
	1100, 800, 352, 1178, 1601, 1602, 1520, 1519, 1724, 90,
	358, 1375, 534, 358, 1498, 534, 1435, 1434, 1223, 1431,
	1432, 1723, 1236, 1237, 799, 1239, 1240, 1241, 1431, 1430,
	1260, 1124, 534, 907, 534, 665, 534, 1195, 1196, 1198,
	670, 673, 674, 675, 671, 358, 672, 676, 90, 90,
	1161, 1162, 782, 780, 512, 1613, 90, 505, 708, 707,
	1649, 691, 1238, 486, 1645, 358, 1122, 1733, 1615, 1732,
	1577, 1047, 1644, 1263, 1641, 352, 1552, 352, 1242, 1542,
	1244, 1245, 1246, 1247, 716, 1421, 1139, 1254, 1251, 1252,
	1250, 23, 54, 352, 1210, 23, 257, 1156, 48, 26,
	27, 1267, 692, 1270, 690, 1157, 1353, 907, 1268, 1156,
	1666, 1269, 1277, 1312, 358, 358, 1348, 352, 1596, 1150,
	28, 1266, 1151, 1816, 1267, 1314, 545, 1494, 1520, 1157,
	1136, 1124, 1363, 1359, 1258, 1354, 1322, 23, 50, 664,
	1614, 1357, 50, 1318, 1319, 936, 358, 665, 358, 358,
	1316, 936, 1376, 665, 1315, 1384, 1124, 1339, 1346, 1541,
	1377, 1326, 1440, 665, 1341, 1342, 1343, 1344, 1345, 1340,
	1940, 1156, 1433, 1135, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1310, 1364, 1185, 50, 1362, 1278, 1274, 1271, 848,
	1279, 1276, 1275, 1383, 964, 1397, 75, 959, 557, 690,
	1561, 1560, 257, 1225, 1382, 1124, 978, 1280, 978, 670,
	673, 674, 675, 671, 1273, 672, 676, 90, 358, 1672,
	693, 823, 1402, 1223, 1409, 50, 1400, 90, 1928, 1671,
	1835, 1806, 358, 1727, 358, 1726, 1715, 1411, 1714, 1674,
	1413, 1424, 1673, 358, 1651, 1639, 1580, 1419, 1018, 50,
	1045, 1174, 1438, 1418, 1302, 90, 1416, 1405, 1370, 1368,
	1040, 358, 1256, 1257, 835, 1214, 1188, 1415, 1417, 1034,
	358, 352, 1033, 90, 1667, 1668, 1670, 1161, 1162, 779,
	1669, 65, 1447, 1193, 1448, 1696, 1720, 1422, 1423, 1562,
	1425, 1426, 1427, 1439, 1204, 1464, 1353, 1164, 797, 783,
	531, 1167, 946, 944, 1166, 943, 1230, 947, 945, 948,
	942, 674, 675, 261, 262, 1461, 1884, 1453, 1698, 1836,
	1308, 1089, 1882, 337, 548, 1465, 1455, 1099, 1098, 358,
	1314, 1468, 358, 358, 358, 90, 358, 546, 1501, 1243,
	1458, 536, 1436, 358, 1259, 706, 513, 352, 1407, 1467,
	1872, 1518, 1446, 537, 1492, 1581, 1493, 825, 826, 1056,
	796, 1475, 1513, 1514, 1515, 1406, 358, 1265, 1050, 1472,
	1473, 789, 1474, 358, 828, 678, 1476, 548, 1478, 352,
	1457, 358, 1097, 1516, 1536, 258, 259, 1901, 1186, 1576,
	1096, 1443, 1535, 49, 1390, 252, 1538, 1225, 1859, 352,
	90, 358, 358, 978, 1680, 1572, 253, 1573, 1574, 1575,
	358, 54, 1679, 1824, 1584, 1157, 1823, 1223, 1543, 1483,
	1571, 358, 1061, 1062, 1063, 1565, 1822, 1521, 1524, 1821,
	1790, 1789, 352, 1555, 550, 1557, 1389, 1388, 1713, 1530,
	1712, 1553, 906, 908, 1568, 917, 1688, 1569, 1361, 1174,
	1205, 917, 818, 56, 1661, 8, 1658, 7, 925, 358,
	358, 1263, 978, 1659, 6, 1657, 5, 58, 1272, 1449,
	689, 51, 1, 1114, 605, 1554, 1585, 1597, 292, 1907,
	352, 358, 352, 1386, 1357, 1877, 278, 1505, 1817, 1737,
	1812, 1743, 1722, 358, 1211, 1595, 568, 567, 577, 578,
	570, 571, 572, 573, 574, 575, 576, 569, 1625, 951,
	579, 1230, 67, 1629, 1608, 1587, 1588, 1623, 1589, 1590,
	1591, 1808, 358, 90, 1631, 1567, 1624, 1633, 1731, 1442,
	1264, 358, 1281, 1053, 1261, 1070, 1755, 1769, 1610, 1665,
	1522, 358, 1646, 986, 975, 1656, 484, 1565, 64, 1702,
	987, 985, 1437, 984, 982, 709, 1012, 1233, 1015, 715,
	713, 714, 358, 718, 231, 344, 1452, 677, 1454, 702,
	551, 1675, 1295, 1294, 1066, 1303, 1697, 1456, 1690, 814,
	1086, 529, 233, 592, 1095, 1689, 1357, 1179, 351, 1360,
	540, 1678, 1693, 1583, 1694, 1459, 1140, 624, 921, 279,
	839, 291, 290, 289, 352, 830, 1642, 1521, 1643, 1149,
	561, 336, 661, 669, 667, 666, 1163, 1665, 1159, 335,
	1311, 1489, 1685, 1735, 834, 25, 55, 358, 358, 358,
	358, 263, 19, 1730, 358, 358, 18, 17, 1565, 20,
	1752, 1753, 1736, 16, 15, 14, 29, 13, 1648, 12,
	11, 10, 358, 9, 1664, 1663, 1662, 358, 1660, 1760,
	4, 358, 254, 1503, 22, 1770, 1503, 1503, 1503, 2,
	1517, 1748, 1751, 1765, 0, 358, 358, 352, 1784, 0,
	0, 0, 1785, 936, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 358, 1804, 0, 1665, 0, 0, 358,
	1503, 1802, 1813, 1749, 358, 1230, 0, 1544, 1803, 1786,
	1665, 1815, 1805, 1565, 0, 352, 1825, 1113, 358, 1777,
	1778, 1779, 1780, 1781, 0, 0, 0, 0, 0, 1121,
	0, 1123, 1831, 1566, 0, 352, 352, 0, 0, 1126,
	1127, 1128, 0, 580, 1578, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 1144, 1582, 0, 1145, 1146, 1147,
	1148, 0, 1782, 1783, 0, 1842, 1843, 358, 306, 47,
	0, 0, 0, 0, 0, 0, 1665, 358, 0, 1863,
	1846, 0, 1867, 1865, 0, 1869, 1860, 1868, 1665, 1665,
	1665, 1876, 0, 1599, 1600, 1656, 358, 1864, 1875, 0,
	358, 0, 1883, 1881, 1880, 0, 0, 1886, 0, 0,
	0, 0, 0, 0, 0, 1386, 47, 0, 0, 1888,
	90, 0, 0, 0, 256, 0, 0, 1632, 1896, 0,
	338, 358, 0, 358, 1893, 1665, 1895, 1665, 1665, 1847,
	1848, 1904, 0, 1735, 1904, 1894, 0, 0, 90, 1898,
	0, 0, 0, 1915, 0, 1566, 1647, 0, 1917, 0,
	0, 0, 0, 0, 0, 1653, 0, 0, 1918, 0,
	266, 0, 1919, 0, 0, 1503, 0, 358, 0, 0,
	0, 1921, 1317, 0, 1930, 0, 0, 0, 0, 358,
	0, 0, 1935, 0, 1665, 1936, 1692, 0, 1665, 0,
	0, 0, 0, 1011, 1904, 0, 568, 567, 577, 578,
	570, 571, 572, 573, 574, 575, 576, 569, 0, 0,
	579, 0, 0, 0, 257, 1000, 48, 26, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 1929, 1666, 1007,
	0, 996, 0, 0, 0, 0, 1566, 997, 28, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 1738, 1740, 1741, 1742, 1937, 0, 0, 1386, 1386,
	0, 0, 0, 1914, 0, 0, 257, 0, 48, 26,
	27, 0, 0, 917, 0, 0, 1767, 0, 0, 0,
	1666, 1768, 0, 0, 0, 1771, 521, 521, 521, 521,
	28, 521, 0, 1374, 1003, 0, 999, 1008, 521, 1653,
	1386, 0, 0, 0, 1005, 1004, 0, 0, 0, 0,
	0, 1566, 1386, 0, 0, 47, 1328, 1810, 0, 0,
	0, 0, 0, 716, 0, 0, 0, 0, 1820, 0,
	593, 0, 0, 595, 0, 0, 0, 1672, 0, 0,
	1906, 0, 1834, 0, 0, 0, 0, 1671, 0, 0,
	1330, 0, 0, 609, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 0, 626, 628, 628, 628, 628,
	628, 628, 628, 628, 0, 657, 658, 659, 660, 1672,
	0, 1503, 1667, 1668, 1670, 0, 0, 680, 1669, 1671,
	0, 1870, 0, 0, 1826, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 542, 0, 0, 0, 0, 0,
	1386, 1332, 0, 0, 1885, 1337, 0, 1331, 1001, 0,
	560, 0, 1329, 0, 1002, 1466, 0, 0, 1335, 0,
	0, 0, 0, 580, 1667, 1668, 1670, 1471, 0, 0,
	1669, 1333, 1334, 0, 0, 716, 539, 1902, 0, 1480,
	1481, 1482, 0, 0, 1485, 0, 0, 614, 0, 0,
	0, 1336, 1338, 0, 0, 0, 625, 0, 1495, 1496,
	1497, 0, 1500, 0, 0, 0, 0, 1009, 0, 1010,
	0, 88, 0, 0, 243, 0, 0, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 49, 0, 1653, 0, 0, 267, 0, 88, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 1549, 88, 0, 88, 0, 0,
	0, 0, 0, 88, 568, 567, 577, 578, 570, 571,
	572, 573, 574, 575, 576, 569, 0, 0, 579, 0,
	521, 0, 0, 49, 0, 0, 0, 0, 0, 1134,
	0, 521, 521, 521, 521, 521, 521, 521, 521, 0,
	0, 0, 0, 0, 0, 521, 521, 0, 0, 0,
	0, 0, 637, 0, 1111, 0, 568, 567, 577, 578,
	570, 571, 572, 573, 574, 575, 576, 569, 0, 1592,
	579, 568, 567, 577, 578, 570, 571, 572, 573, 574,
	575, 576, 569, 0, 0, 579, 639, 0, 257, 0,
	48, 26, 27, 1605, 1606, 1607, 0, 1112, 0, 0,
	0, 0, 1666, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 28, 0, 47, 0, 0, 1636, 0, 0,
	0, 568, 567, 577, 578, 570, 571, 572, 573, 574,
	575, 576, 569, 0, 615, 579, 0, 0, 0, 0,
	88, 0, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 0, 880, 881, 0, 882, 883, 884, 886,
	885, 0, 1903, 640, 0, 0, 0, 1681, 1682, 1683,
	1684, 655, 638, 837, 838, 1076, 0, 877, 643, 0,
	0, 0, 0, 0, 338, 338, 338, 338, 338, 1075,
	0, 0, 0, 0, 637, 0, 0, 0, 0, 680,
	0, 956, 0, 0, 0, 0, 0, 0, 338, 0,
	0, 1672, 0, 0, 1716, 0, 1080, 0, 0, 0,
	0, 1671, 0, 0, 0, 1074, 0, 0, 639, 0,
	903, 0, 0, 0, 0, 0, 614, 0, 0, 912,
	913, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 580, 0, 0, 656, 88, 685, 88, 0, 257,
	0, 48, 26, 27, 0, 1761, 1667, 1668, 1670, 0,
	1766, 0, 1669, 1666, 0, 0, 0, 0, 1071, 1068,
	1069, 0, 1067, 28, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 0, 0, 0, 1787, 0, 521,
	0, 521, 0, 580, 0, 640, 0, 0, 0, 0,
	0, 1078, 1081, 655, 638, 0, 0, 521, 580, 644,
	643, 970, 0, 257, 0, 48, 26, 27, 0, 0,
	0, 0, 0, 0, 0, 1832, 0, 1666, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 23, 24, 48,
	26, 27, 0, 0, 0, 0, 1105, 0, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 42, 0, 0,
	0, 28, 1672, 0, 0, 49, 0, 0, 0, 0,
	0, 1073, 1671, 0, 0, 0, 656, 0, 0, 0,
	37, 0, 0, 0, 50, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 88, 0, 0,
	88, 0, 0, 88, 1072, 0, 0, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1667, 1668, 1670,
	0, 1090, 1091, 1669, 542, 0, 1672, 0, 88, 1814,
	1153, 1154, 0, 0, 0, 0, 1671, 0, 0, 0,
	0, 0, 0, 0, 1077, 1913, 0, 88, 30, 31,
	33, 32, 35, 0, 0, 0, 802, 0, 338, 0,
	1079, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 43, 44, 0, 0, 45, 46,
	34, 1667, 1668, 1670, 0, 0, 0, 1669, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1941, 1942, 0,
	0, 0, 0, 0, 0, 229, 267, 0, 1125, 0,
	0, 0, 0, 267, 267, 0, 0, 0, 918, 267,
	0, 0, 0, 918, 1143, 0, 0, 38, 39, 239,
	40, 41, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 0, 0, 267, 267, 267, 267, 0, 88,
	0, 918, 88, 88, 88, 88, 88, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 88, 0, 0,
	0, 685, 0, 521, 224, 0, 88, 88, 0, 0,
	226, 0, 0, 0, 0, 0, 0, 232, 228, 0,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 0, 234, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1358, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1371,
	1372, 1373, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 88, 0, 0, 0, 0, 0, 0, 88,
	0, 88, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 0, 0, 1404, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 609,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1350, 227, 0, 235, 236, 237, 238,
	242, 0, 0, 0, 0, 241, 240, 0, 1365, 1366,
	0, 0, 1367, 0, 0, 1369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 1463, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1306, 1307, 0, 0, 0, 0,
	0, 0, 88, 1358, 0, 0, 1598, 0, 0, 0,
	0, 0, 267, 0, 0, 1537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 802, 1635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 1105, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1676, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1358, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1634, 0, 0, 0, 0,
	1638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1717, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1839, 0, 0,
	0, 685, 0, 1750, 0, 0, 0, 0, 0, 0,
	1759, 614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1811, 1231, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1933, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1231, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 1899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 918, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 470, 459, 0, 420,
	472, 390, 408, 480, 410, 411, 446, 370, 429, 155,
	405, 388, 93, 393, 363, 400, 364, 391, 422, 117,
	389, 461, 432, 131, 478, 134, 437, 0, 177, 143,
	0, 0, 424, 463, 427, 454, 419, 447, 378, 436,
	473, 406, 442, 474, 0, 0, 0, 357, 0, 979,
	980, 0, 0, 0, 0, 0, 106, 0, 441, 468,
	402, 483, 445, 362, 439, 0, 368, 371, 479, 466,
	397, 398, 1187, 0, 0, 0, 0, 0, 0, 423,
	428, 451, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 1892, 435, 0, 0,
	0, 375, 369, 0, 421, 0, 0, 0, 377, 0,
	395, 452, 0, 359, 457, 464, 418, 204, 467, 415,
	414, 162, 0, 109, 88, 183, 121, 407, 132, 449,
	481, 471, 425, 462, 392, 401, 111, 399, 169, 156,
	195, 434, 157, 167, 135, 187, 163, 194, 469, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 367,
	360, 396, 455, 458, 382, 444, 372, 403, 450, 404,
	426, 387, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 365, 0, 178, 197, 214,
	215, 366, 386, 465, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 443,
	170, 108, 196, 176, 0, 381, 385, 379, 380, 430,
	431, 475, 476, 477, 453, 376, 0, 383, 384, 0,
	460, 126, 433, 92, 100, 133, 482, 211, 0, 164,
	119, 198, 0, 0, 409, 361, 413, 0, 0, 0,
	0, 0, 0, 0, 373, 374, 171, 417, 412, 438,
	440, 448, 456, 470, 459, 105, 420, 472, 390, 408,
	480, 410, 411, 446, 370, 429, 155, 405, 388, 93,
	393, 363, 400, 364, 391, 422, 117, 389, 461, 432,
	131, 478, 134, 437, 0, 177, 143, 0, 0, 424,
	463, 427, 454, 419, 447, 378, 436, 473, 406, 442,
	474, 0, 0, 0, 357, 0, 979, 980, 0, 0,
	0, 0, 0, 106, 0, 441, 468, 402, 483, 445,
	362, 439, 0, 368, 371, 479, 466, 397, 398, 0,
	0, 0, 0, 0, 0, 0, 423, 428, 451, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 394, 0, 435, 0, 0, 0, 375, 369,
	0, 421, 0, 0, 0, 377, 0, 395, 452, 0,
	359, 457, 464, 418, 204, 467, 415, 414, 162, 0,
	109, 0, 183, 121, 407, 132, 449, 481, 471, 425,
	462, 392, 401, 111, 399, 169, 156, 195, 434, 157,
	167, 135, 187, 163, 194, 469, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 367, 360, 396, 455,
	458, 382, 444, 372, 403, 450, 404, 426, 387, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 365, 0, 178, 197, 214, 215, 366, 386,
	465, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 443, 170, 108, 196,
	176, 0, 381, 385, 379, 380, 430, 431, 475, 476,
	477, 453, 376, 0, 383, 384, 0, 460, 126, 433,
	92, 100, 133, 482, 211, 0, 164, 119, 198, 0,
	0, 409, 361, 413, 0, 0, 0, 0, 0, 0,
	0, 373, 374, 171, 417, 412, 438, 440, 448, 456,
	470, 459, 105, 420, 472, 390, 408, 480, 410, 411,
	446, 370, 429, 155, 405, 388, 93, 393, 363, 400,
	364, 391, 422, 117, 389, 461, 432, 131, 478, 134,
	437, 0, 177, 143, 0, 0, 424, 463, 427, 454,
	419, 447, 378, 436, 473, 406, 442, 474, 0, 0,
	0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 441, 468, 402, 483, 445, 362, 439, 0,
	368, 371, 479, 466, 397, 398, 0, 0, 0, 0,
	0, 0, 0, 423, 428, 451, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 394,
	0, 435, 0, 0, 0, 375, 369, 0, 421, 0,
	0, 0, 377, 0, 395, 452, 0, 359, 457, 464,
	418, 204, 467, 415, 414, 162, 0, 109, 0, 183,
	121, 407, 132, 449, 481, 471, 425, 462, 392, 401,
	111, 399, 169, 156, 195, 434, 157, 167, 135, 187,
	163, 194, 469, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 367, 360, 396, 455, 458, 382, 444,
	372, 403, 450, 404, 426, 387, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 365,
	0, 178, 197, 214, 215, 366, 386, 465, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 443, 170, 108, 196, 176, 0, 381,
	385, 379, 380, 430, 431, 475, 476, 477, 453, 376,
	0, 383, 384, 0, 460, 126, 433, 92, 100, 133,
	482, 211, 0, 164, 119, 198, 0, 0, 409, 361,
	413, 0, 0, 0, 0, 0, 0, 0, 373, 374,
	171, 417, 412, 438, 440, 448, 456, 470, 459, 105,
	420, 472, 390, 408, 480, 410, 411, 446, 370, 429,
	155, 405, 388, 93, 393, 363, 400, 364, 391, 422,
	117, 389, 461, 432, 131, 478, 134, 437, 0, 177,
	143, 0, 0, 424, 463, 427, 454, 419, 447, 378,
	436, 473, 406, 442, 474, 50, 0, 0, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 441,
	468, 402, 483, 445, 362, 439, 0, 368, 371, 479,
	466, 397, 398, 0, 0, 0, 0, 0, 0, 0,
	423, 428, 451, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 0, 435, 0,
	0, 0, 375, 369, 0, 421, 0, 0, 0, 377,
	0, 395, 452, 0, 359, 457, 464, 418, 204, 467,
	415, 414, 162, 0, 109, 0, 183, 121, 407, 132,
	449, 481, 471, 425, 462, 392, 401, 111, 399, 169,
	156, 195, 434, 157, 167, 135, 187, 163, 194, 469,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	367, 360, 396, 455, 458, 382, 444, 372, 403, 450,
	404, 426, 387, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 365, 0, 178, 197,
	214, 215, 366, 386, 465, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	443, 170, 108, 196, 176, 0, 381, 385, 379, 380,
	430, 431, 475, 476, 477, 453, 376, 0, 383, 384,
	0, 460, 126, 433, 92, 100, 133, 482, 211, 0,
	164, 119, 198, 0, 0, 409, 361, 413, 0, 0,
	0, 0, 0, 0, 0, 373, 374, 171, 417, 412,
	438, 440, 448, 456, 470, 459, 105, 420, 472, 390,
	408, 480, 410, 411, 446, 370, 429, 155, 405, 388,
	93, 393, 363, 400, 364, 391, 422, 117, 389, 461,
	432, 131, 478, 134, 437, 0, 177, 143, 0, 0,
	424, 463, 427, 454, 419, 447, 378, 436, 473, 406,
	442, 474, 0, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 441, 468, 402, 483,
	445, 362, 439, 0, 368, 371, 479, 466, 397, 398,
	0, 0, 0, 0, 0, 0, 0, 423, 428, 451,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 394, 0, 435, 0, 0, 0, 375,
	369, 0, 421, 0, 0, 0, 377, 0, 395, 452,
	0, 359, 457, 464, 418, 204, 467, 415, 414, 162,
	0, 109, 0, 183, 121, 407, 132, 449, 481, 471,
	425, 462, 392, 401, 111, 399, 169, 156, 195, 434,
	157, 167, 135, 187, 163, 194, 469, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 367, 360, 396,
	455, 458, 382, 444, 372, 403, 450, 404, 426, 387,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	355, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 365, 0, 178, 197, 214, 215, 366,
	386, 465, 207, 208, 209, 210, 0, 0, 0, 356,
	354, 125, 174, 129, 136, 165, 212, 443, 170, 108,
	196, 176, 350, 381, 385, 379, 380, 430, 431, 475,
	476, 477, 453, 376, 0, 383, 384, 0, 460, 126,
	433, 92, 100, 133, 482, 211, 0, 164, 119, 198,
	0, 0, 409, 361, 413, 0, 0, 0, 0, 0,
	0, 0, 373, 374, 171, 417, 412, 438, 440, 448,
	456, 470, 459, 105, 420, 472, 390, 408, 480, 410,
	411, 446, 370, 429, 155, 405, 388, 93, 393, 363,
	400, 364, 391, 422, 117, 389, 461, 432, 131, 478,
	134, 437, 0, 177, 143, 0, 0, 424, 463, 427,
	454, 419, 447, 378, 436, 473, 406, 442, 474, 0,
	0, 0, 272, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 441, 468, 402, 483, 445, 362, 439,
	0, 368, 371, 479, 466, 397, 398, 0, 0, 0,
	0, 0, 0, 0, 423, 428, 451, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 845, 0,
	394, 0, 435, 0, 0, 0, 375, 369, 0, 421,
	0, 0, 0, 377, 0, 395, 452, 0, 359, 457,
	464, 418, 204, 467, 415, 414, 162, 0, 109, 0,
	183, 121, 407, 132, 449, 481, 471, 425, 462, 392,
	401, 111, 399, 169, 156, 195, 434, 157, 167, 135,
	187, 163, 194, 469, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 367, 360, 396, 455, 458, 382,
	444, 372, 403, 450, 404, 426, 387, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	365, 0, 178, 197, 214, 215, 366, 386, 465, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 443, 170, 108, 196, 176, 0,
	381, 385, 379, 380, 430, 431, 475, 476, 477, 453,
	376, 0, 383, 384, 0, 460, 126, 433, 92, 100,
	133, 482, 211, 0, 164, 119, 198, 0, 0, 409,
	361, 413, 0, 0, 0, 0, 0, 0, 0, 373,
	374, 171, 417, 412, 438, 440, 448, 456, 470, 459,
	105, 420, 472, 390, 408, 480, 410, 411, 446, 370,
	429, 155, 405, 388, 93, 393, 363, 400, 364, 391,
	422, 117, 389, 461, 432, 131, 478, 134, 437, 0,
	177, 143, 0, 0, 424, 463, 427, 454, 419, 447,
	378, 436, 473, 406, 442, 474, 0, 0, 0, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	441, 468, 402, 483, 445, 362, 439, 0, 368, 371,
	479, 466, 397, 398, 0, 0, 0, 0, 0, 0,
	0, 423, 428, 451, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 394, 0, 435,
	0, 0, 0, 375, 369, 0, 421, 0, 0, 0,
	377, 0, 395, 452, 0, 359, 457, 464, 418, 204,
	467, 415, 414, 162, 0, 109, 0, 183, 121, 407,
	132, 449, 481, 471, 425, 462, 392, 401, 111, 399,
	169, 156, 195, 434, 157, 167, 135, 187, 163, 194,
	469, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 367, 360, 396, 455, 458, 382, 444, 372, 403,
	450, 404, 426, 387, 0, 0, 0, 0, 0, 94,
	184, 695, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 355, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 365, 0, 178,
	197, 214, 215, 366, 386, 465, 207, 208, 209, 210,
	0, 0, 0, 356, 354, 125, 174, 129, 136, 165,
	212, 443, 170, 108, 196, 176, 350, 381, 385, 379,
	380, 430, 431, 475, 476, 477, 453, 376, 0, 383,
	384, 0, 460, 126, 433, 92, 100, 133, 482, 211,
	0, 164, 119, 198, 0, 0, 409, 361, 413, 0,
	0, 0, 0, 0, 0, 0, 373, 374, 171, 417,
	412, 438, 440, 448, 456, 470, 459, 105, 420, 472,
	390, 408, 480, 410, 411, 446, 370, 429, 155, 405,
	388, 93, 393, 363, 400, 364, 391, 422, 117, 389,
	461, 432, 131, 478, 134, 437, 0, 177, 143, 0,
	0, 424, 463, 427, 454, 419, 447, 378, 436, 473,
	406, 442, 474, 0, 0, 0, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 441, 468, 402,
	483, 445, 362, 439, 0, 368, 371, 479, 466, 397,
	398, 0, 0, 0, 0, 0, 0, 0, 423, 428,
	451, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 0, 435, 0, 0, 0,
	375, 369, 0, 421, 0, 0, 0, 377, 0, 395,
	452, 0, 359, 457, 464, 418, 204, 467, 415, 414,
	162, 0, 109, 0, 183, 121, 407, 132, 449, 481,
	471, 425, 462, 392, 401, 111, 399, 169, 156, 195,
	434, 157, 167, 135, 187, 163, 194, 469, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 367, 360,
	396, 455, 458, 382, 444, 372, 403, 450, 404, 426,
	387, 0, 0, 0, 0, 0, 94, 184, 345, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 355, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 365, 0, 178, 197, 214, 215,
	366, 386, 465, 207, 208, 209, 210, 0, 0, 0,
	356, 354, 348, 347, 129, 136, 165, 212, 443, 170,
	108, 196, 176, 350, 381, 385, 379, 380, 430, 431,
	475, 476, 477, 453, 376, 0, 383, 384, 0, 460,
	126, 433, 92, 100, 133, 482, 211, 0, 164, 119,
	198, 0, 0, 409, 361, 413, 0, 0, 0, 0,
	0, 0, 0, 373, 374, 171, 417, 412, 438, 440,
	448, 456, 470, 459, 105, 420, 472, 390, 408, 480,
	410, 411, 446, 370, 429, 155, 405, 388, 93, 393,
	363, 400, 364, 391, 422, 117, 389, 461, 432, 131,
	478, 134, 437, 0, 177, 143, 0, 0, 424, 463,
	427, 454, 419, 447, 378, 436, 473, 406, 442, 474,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 441, 468, 402, 483, 445, 362,
	439, 0, 368, 371, 479, 466, 397, 398, 0, 0,
	0, 0, 0, 0, 0, 423, 428, 451, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 0, 435, 0, 0, 0, 375, 369, 0,
	421, 0, 0, 0, 377, 0, 395, 452, 0, 359,
	457, 464, 418, 204, 467, 415, 414, 162, 0, 109,
	0, 183, 121, 407, 132, 449, 481, 471, 425, 462,
	392, 401, 111, 399, 169, 156, 195, 434, 157, 167,
	135, 187, 163, 194, 469, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 367, 360, 396, 455, 458,
	382, 444, 372, 403, 450, 404, 426, 387, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 365, 0, 178, 197, 214, 215, 366, 386, 465,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 443, 170, 108, 196, 176,
	0, 381, 385, 379, 380, 430, 431, 475, 476, 477,
	453, 376, 0, 383, 384, 0, 460, 126, 433, 92,
	100, 133, 482, 211, 0, 164, 119, 198, 0, 0,
	409, 361, 413, 0, 0, 0, 0, 0, 0, 0,
	373, 374, 171, 417, 412, 438, 440, 448, 456, 470,
	459, 105, 420, 472, 390, 408, 480, 410, 411, 446,
	370, 429, 155, 405, 388, 93, 393, 363, 400, 364,
	391, 422, 117, 389, 461, 432, 131, 478, 134, 437,
	0, 177, 143, 0, 0, 424, 463, 427, 454, 419,
	447, 378, 436, 473, 406, 442, 474, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 441, 468, 402, 483, 445, 362, 439, 0, 368,
	371, 479, 466, 397, 398, 0, 0, 0, 0, 0,
	0, 0, 423, 428, 451, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 394, 0,
	435, 0, 0, 0, 375, 369, 0, 421, 0, 0,
	0, 377, 0, 395, 452, 0, 359, 457, 464, 418,
	204, 467, 415, 414, 162, 0, 109, 0, 183, 121,
	407, 132, 449, 481, 471, 425, 462, 392, 401, 111,
	399, 169, 156, 195, 434, 157, 167, 135, 187, 163,
	194, 469, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 367, 360, 396, 455, 458, 382, 444, 372,
	403, 450, 404, 426, 387, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 365, 0,
	178, 197, 214, 215, 366, 386, 465, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 443, 170, 108, 196, 176, 0, 381, 385,
	379, 380, 430, 431, 475, 476, 477, 453, 376, 0,
	383, 384, 0, 460, 126, 433, 92, 100, 133, 482,
	211, 0, 164, 119, 198, 0, 0, 409, 361, 413,
	0, 0, 0, 0, 0, 0, 0, 373, 374, 171,
	417, 412, 438, 440, 448, 456, 470, 459, 105, 420,
	472, 390, 408, 480, 410, 411, 446, 370, 429, 155,
	405, 388, 93, 393, 363, 400, 364, 391, 422, 117,
	389, 461, 432, 131, 478, 134, 437, 0, 177, 143,
	0, 0, 424, 463, 427, 454, 419, 447, 378, 436,
	473, 406, 442, 474, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 441, 468,
	402, 483, 445, 362, 439, 0, 368, 371, 479, 466,
	397, 398, 0, 0, 0, 0, 0, 0, 0, 423,
	428, 451, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 0, 435, 0, 0,
	0, 375, 369, 0, 421, 0, 0, 0, 377, 0,
	395, 452, 0, 359, 457, 464, 418, 204, 467, 415,
	414, 162, 0, 109, 0, 183, 121, 407, 132, 449,
	481, 471, 425, 462, 392, 401, 111, 399, 169, 156,
	195, 434, 157, 167, 135, 187, 163, 194, 469, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 367,
	360, 396, 455, 458, 382, 444, 372, 403, 450, 404,
	426, 387, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 365, 0, 178, 197, 214,
	215, 366, 386, 465, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 443,
	170, 108, 196, 176, 0, 381, 385, 379, 380, 430,
	431, 475, 476, 477, 453, 376, 0, 383, 384, 0,
	460, 126, 433, 92, 100, 133, 482, 211, 0, 164,
	119, 198, 0, 0, 409, 361, 413, 0, 0, 0,
	0, 0, 0, 0, 373, 374, 171, 417, 412, 438,
	440, 448, 456, 155, 0, 105, 93, 0, 0, 274,
	0, 0, 0, 117, 271, 0, 0, 131, 316, 134,
	0, 0, 177, 143, 0, 0, 0, 0, 307, 308,
	0, 0, 0, 0, 0, 0, 968, 0, 50, 0,
	0, 272, 295, 293, 297, 298, 299, 300, 0, 0,
	106, 296, 301, 302, 303, 969, 0, 0, 269, 286,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 0, 0, 0,
	0, 328, 0, 285, 0, 0, 281, 282, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 326, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 330, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 304, 317,
	327, 323, 324, 321, 322, 320, 319, 318, 329, 309,
	310, 311, 312, 314, 0, 126, 313, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 900, 0, 274, 0, 0, 0, 117, 271, 0,
	171, 131, 316, 134, 0, 0, 177, 143, 325, 105,
	0, 0, 307, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 295, 293, 297, 298,
	299, 300, 0, 0, 106, 296, 301, 302, 303, 0,
	0, 0, 269, 286, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 265, 0, 0, 0, 328, 0, 285, 0, 0,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 326, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 330, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 304, 317, 327, 323, 324, 321, 322, 320,
	319, 318, 329, 309, 310, 311, 312, 314, 0, 126,
	313, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 274, 0, 0,
	0, 117, 271, 0, 171, 131, 316, 134, 0, 0,
	177, 143, 325, 105, 0, 0, 307, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 534, 272,
	295, 293, 297, 298, 299, 300, 0, 0, 106, 296,
	301, 302, 303, 0, 0, 0, 269, 286, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 0, 0, 0, 0, 328,
	0, 285, 0, 0, 281, 282, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 326, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	330, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 304, 317, 327, 323,
	324, 321, 322, 320, 319, 318, 329, 309, 310, 311,
	312, 314, 0, 126, 313, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 274, 0, 0, 0, 117, 271, 0, 171, 131,
	316, 134, 0, 0, 177, 143, 325, 105, 0, 0,
	307, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 295, 293, 297, 298, 299, 300,
	0, 0, 106, 296, 301, 302, 303, 0, 0, 0,
	269, 286, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 265,
	0, 0, 0, 328, 0, 285, 0, 0, 281, 282,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 326, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 330, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	304, 317, 327, 323, 324, 321, 322, 320, 319, 318,
	329, 309, 310, 311, 312, 314, 0, 126, 313, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 155, 0, 0, 93, 0, 0, 274,
	325, 105, 0, 117, 271, 0, 0, 131, 316, 134,
	0, 0, 177, 143, 0, 0, 0, 0, 307, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 295, 293, 297, 298, 299, 300, 0, 0,
	106, 296, 301, 302, 303, 0, 0, 0, 269, 286,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 0, 0, 0,
	0, 328, 0, 285, 0, 0, 281, 282, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 326, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 330, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 304, 317,
	327, 323, 324, 321, 322, 320, 319, 318, 329, 309,
	310, 311, 312, 314, 0, 126, 313, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 274, 0, 0, 0, 117, 271, 0,
	171, 131, 316, 134, 0, 0, 177, 143, 325, 105,
	0, 0, 307, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 295, 293, 297, 298,
	299, 300, 0, 0, 106, 296, 301, 302, 303, 0,
	0, 0, 269, 286, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 328, 0, 285, 0, 0,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 326, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 330, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 304, 317, 327, 323, 324, 321, 322, 320,
	319, 318, 329, 309, 310, 311, 312, 314, 0, 126,
	313, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 316, 134, 0, 0,
	177, 143, 325, 105, 0, 0, 307, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 272,
	295, 293, 297, 298, 299, 300, 0, 0, 106, 296,
	301, 302, 303, 0, 0, 0, 0, 286, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 0, 0, 0, 0, 328,
	0, 285, 0, 0, 281, 282, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 326, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 1938, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	330, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 304, 317, 327, 323,
	324, 321, 322, 320, 319, 318, 329, 309, 310, 311,
	312, 314, 0, 126, 313, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 274, 0, 0, 0, 117, 0, 0, 171, 131,
	316, 134, 0, 0, 177, 143, 325, 105, 0, 0,
	307, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 295, 293, 297, 298, 299, 300,
	0, 0, 106, 296, 301, 302, 303, 0, 0, 0,
	0, 286, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 328, 0, 285, 0, 0, 281, 282,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 326, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 330, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	304, 317, 327, 323, 324, 321, 322, 320, 319, 318,
	329, 309, 310, 311, 312, 314, 0, 126, 313, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 316, 134, 0, 0, 177, 143,
	325, 105, 0, 0, 307, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 295, 293,
	297, 298, 299, 300, 0, 0, 106, 296, 301, 302,
	303, 0, 0, 0, 0, 286, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 0, 0, 0, 0, 328, 0, 285,
	0, 0, 281, 282, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	326, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 330, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 304, 317, 327, 323, 324, 321,
	322, 320, 319, 318, 329, 309, 310, 311, 312, 314,
	0, 126, 313, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 325, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 577, 578, 570, 571, 572, 573, 574,
	575, 576, 569, 0, 0, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 580, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1410, 0, 0, 272, 0, 1217, 1218, 1219,
	0, 0, 0, 0, 106, 1222, 1220, 302, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 1224, 1229,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 1226, 0, 1228, 1227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1216, 0, 0, 272,
	0, 1217, 1218, 1219, 0, 0, 0, 0, 106, 1222,
	1220, 302, 303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 1224, 1229, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 1226, 0, 1228,
	1227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 1217, 1218, 1219, 0, 0,
	0, 0, 106, 1222, 1220, 302, 303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 1224, 1229, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 1226, 0, 1228, 1227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 357, 295, 293,
	297, 298, 299, 300, 0, 0, 106, 296, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 742, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 1819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 0, 769, 770, 160,
	771, 772, 773, 775, 774, 744, 745, 746, 750, 748,
	747, 749, 721, 723, 202, 719, 722, 728, 724, 725,
	726, 740, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 741, 751, 752, 753, 754, 755, 756,
	757, 758, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 720, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 556, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 0, 558, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	553, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 742, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 0, 769, 770, 160, 771, 772,
	773, 775, 774, 744, 745, 746, 750, 748, 747, 749,
	721, 723, 202, 719, 722, 728, 724, 725, 726, 740,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 741, 751, 752, 753, 754, 755, 756, 757, 758,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 720, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 1546, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 1545, 200,
	149, 154, 152, 199, 1547, 192, 142, 139, 0, 98,
	190, 140, 138, 1548, 898, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 895, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 684, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 686,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 23, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 171, 0, 131, 0,
	134, 0, 0, 177, 143, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1049, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 23, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 171, 0, 131, 0, 134,
	0, 0, 177, 143, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 0, 0, 832, 0,
	0, 833, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 705, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	0, 704, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	684, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 686, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 682, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 1891, 117, 0, 171, 0, 131, 0,
	134, 0, 0, 177, 143, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 1387, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 1504, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 1387, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	686, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 558, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 792, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 662, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 340,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 105,
}

var yyPact = [...]int{
	2641, -1000, -218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1436, 1488, -1000, -1000, -1000, -1000, -1000, -1000, 1268,
	385, 478, 432, 169, 18312, 429, 2783, 18920, -1000, 182,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1171, -1000, -1000,
	-1000, -1000, -1000, 1418, 1430, 1236, 1404, 1314, -1000, 8567,
	364, 16488, 18008, 6320, -1000, 1047, -148, 404, 18616, 360,
	360, 18616, 18616, 18920, 360, -1000, -29, 426, 18920, -1000,
	18920, 357, 1041, 357, 357, 357, 18920, -1000, 500, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 18920, 1038, 1356, 379, 4972, 4972, 4972,
	4972, 270, 4972, 24, 1289, -1000, -1000, -1000, -1000, 4972,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	908, 1362, 9189, 9189, 1436, -1000, 1171, -1000, -1000, -1000,
	1342, -1000, -1000, 681, 1463, -1000, 12229, 497, -1000, 9189,
	72, 1212, -1000, -1000, 1212, -1000, -1000, 484, -1000, -1000,
	-1000, 10101, 10101, 10101, 10101, 10101, 10101, 10101, -1000, -1000,
	-1000, -1000, 65, -191, 885, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 496, -1000, 8885, 1212, 1212, 1212,
	1212, 1212, 1212, 1212, 1212, 9189, 1212, 1212, 1212, 1212,
	1212, 1212, 1212, 1212, 1212, 2373, 1212, 1212, 1212, 1212,
	-1000, 17704, 1149, 1208, -1000, -1000, -1000, 1392, 14055, 14967,
	18920, 1090, -1000, 1206, 5983, 45, -1000, -1000, -1000, 625,
	495, 14663, -1000, -1000, -1000, 1355, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1044, -1000, 12533, 424, -1000, -1000,
	18920, 1267, 1037, 668, 1036, 1288, 392, 1388, 18920, -1000,
	17400, 4972, 399, 18920, 1376, 1287, 18920, 1008, 985, -1000,
	7331, -1000, 4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972,
	-1000, -1000, -1000, -1000, -1000, -1000, 4972, 4972, -1000, 56,
	-1000, 18920, -1000, -1000, -1000, -1000, 1483, 530, 828, 493,
	1207, -1000, 807, 1418, 908, 1314, 14359, 1262, -1000, -1000,
	18920, -1000, 9189, 9189, 791, -1000, 17096, -1000, -1000, 5646,
	535, 10101, 835, 680, 10101, 10101, 10101, 10101, 10101, 10101,
	10101, 10101, 10101, 10101, 10101, 10101, 10101, 10101, 10101, 863,
	2231, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 983, -1000, 1171, 11621, 11621, 40, 40,
	40, 40, 40, 40, 10405, -1000, -228, -1000, 308, 7959,
	-1000, 6657, 908, 1019, 747, 8885, 8567, 8567, 9189, 9189,
	10101, 19224, 8567, 1395, 644, 747, 19224, -1000, 908, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 114, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8567, 8567, 8567,
	8567, 266, 18920, -1000, 19224, 16488, 16488, 16488, 16488, 16488,
	-1000, 1309, 1304, -1000, 1302, 1301, 1308, 18920, -1000, 1021,
	14055, 444, 1212, -1000, 16792, -1000, -1000, 266, 1185, 16488,
	18920, -1000, -1000, 5309, 1206, 45, 1180, -1000, 11, 34,
	7655, 6657, 542, -1000, -1000, -1000, -1000, 4298, 626, 1914,
	-112, 63, -1000, -1000, -1000, -1000, -1000, 1235, -1000, -1000,
	-1000, 1235, 283, 1235, 1235, 1235, -1000, 1235, 1235, 102,
	102, 102, 102, 102, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1259, 1256, -1000, 1235, 1235, 1235, -1000, 1235, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1247,
	334, 1247, 1237, 1237, -1000, -1000, 13750, 1385, -76, 979,
	4972, 1375, 4972, 18920, 1454, 18920, -1000, -1000, -1000, 12533,
	-1000, 2450, 18920, -1000, 18920, -1000, -1000, 18920, 4972, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 604, -1000, -1000, -1000, -1000, 1324,
	9189, 9189, 6994, 9189, -1000, -1000, -1000, 1362, -1000, 1395,
	1411, -1000, 1335, 1334, 8567, -1000, -1000, 535, 615, -1000,
	-1000, 834, -1000, -1000, -1000, -1000, 489, 1212, -1000, 2250,
	-1000, -1000, -1000, -1000, 835, 10101, 10101, 10101, 2198, 2250,
	2315, 155, 116, 40, 141, 141, 41, 41, 41, 41,
	41, 90, 90, -1000, -1000, -1000, -1000, -1000, -1000, 1235,
	1247, 334, 1247, 1237, 1237, -1000, -1000, 908, -1000, 897,
	-1000, -1000, 886, 109, -78, -1000, -1000, -1000, -1000, 908,
	8567, 1019, 1191, 12229, -1000, -1000, -1000, 9189, -1000, 908,
	1017, 1017, 692, 818, 623, 2265, 1159, -1000, 480, 1017,
	8567, 636, -1000, 9189, 908, -1000, -1000, 1017, 908, 1017,
	1017, 1129, 1212, -1000, 1157, -1000, 616, 1208, 1266, 1286,
	1039, -1000, -1000, -1000, -1000, 1303, -1000, 1300, -1000, -1000,
	-1000, -1000, -66, 419, 415, 406, 18616, -1000, 1443, 16488,
	1133, -1000, -1000, 1180, 45, 58, -1000, -1000, -1000, -1000,
	747, 612, -1000, -1000, 955, 1169, 3961, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1253, 819, 18616, 314,
	319, 441, 434, 927, -1000, -1000, -1000, 773, -1000, 18616,
	1481, -1000, -1000, 313, -1000, 311, 660, 892, 18920, 171,
	1252, 11013, -1000, -237, -1000, 50, -1000, -1000, 848, 102,
	102, 1235, 102, 102, 102, -1000, -1000, 542, 1349, 542,
	542, 542, 542, 891, 891, -78, -78, -1000, -1000, -1000,
	867, 1247, -1000, -1000, -1000, 865, -1000, 1251, 18920, 18616,
	1171, -1000, 6657, -1000, -1000, -1000, -1000, -1000, 1384, 1110,
	-1000, -1000, -1000, -1000, 417, -1000, -1000, 1096, 840, 607,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 263, 439, -1000, 4972, -1000, 646, 18920, 18920, 1322,
	747, 747, 479, -1000, -1000, 18920, -1000, -1000, -1000, -1000,
	1142, -1000, -1000, -1000, 4635, 8567, -1000, 2198, 2250, 1850,
	-1000, 10101, 10101, -1000, 55, -1000, -191, -1000, -1000, 140,
	122, -1000, 1017, -1000, 8567, 747, -1000, -1000, -1000, 1955,
	863, 1955, 10101, 10101, 10101, 10101, 10101, 6994, -43, 1117,
	630, -1000, 9189, 876, -1000, -1000, -1000, -1000, -1000, 1285,
	19224, 1212, -1000, 13446, 18616, 1436, 19224, 9189, 9189, -1000,
	-1000, 9189, 1246, -1000, 9189, -1000, -1000, -1000, -1000, 1245,
	1212, 1212, 1212, 997, -1000, 1436, 1133, -1000, -1000, -1000,
	-11, 10, -1000, 9189, -1000, 4298, -1000, 4298, 15576, -1000,
	1467, 1415, 326, 4, -1000, 917, 913, -1000, 910, -1000,
	-1000, 44, -1000, -137, 103, 30, -1000, -1000, 1212, -1000,
	1244, 1382, -1000, 1359, 858, -1000, 10709, -163, -1000, -1000,
	-191, -1000, -1000, -1000, 1212, -1000, 1243, 1240, -1000, 1234,
	1212, 470, -1000, -1000, -1000, 1070, 542, 542, 102, 542,
	542, 542, -1000, 598, -1000, -1000, -1000, -1000, 1014, -1000,
	1005, -1000, -1000, 1158, -1000, 1002, 18920, 18616, 1239, 1282,
	-1000, 1148, -1000, 603, 1412, 234, 18920, 1454, 1454, -1000,
	312, 18616, -1000, 18616, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 18616, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 18920, -1000, -1000, -1000, -1000, -1000,
	18616, 350, -1000, -1000, 887, 9189, -1000, -1000, -1000, 6657,
	-1000, 1443, 16488, -1000, -1000, 908, -1000, 10101, 2250, 2250,
	-1000, 886, -1000, 48, 20, -1000, -1000, 908, 1235, 1235,
	-1000, 1235, 1237, -1000, -1000, 1235, 167, 1235, 166, 908,
	908, 265, 1440, 322, 209, 371, -1000, 1212, -36, -1000,
	747, 9189, -1000, 1366, 1095, 1113, -1000, -1000, 8263, 908,
	1000, 467, 997, 1418, -1000, 747, 747, 747, 15880, 747,
	-200, 15880, 15880, 15880, 13141, 18616, 1418, -1000, -1000, -1000,
	-1000, 747, 3961, -1000, 992, -1000, 298, 1235, 374, 374,
	-146, 310, 309, 1212, -1000, -1000, -1000, -1000, -148, -1000,
	-1000, 660, -1000, 1234, 9189, 15880, 154, -1000, 1145, 1064,
	11317, -1000, 12837, -1000, 908, -1000, 838, -1000, 698, 1061,
	6657, -1000, -1000, -1000, 542, -1000, -1000, -1000, -1000, -1000,
	102, 882, 102, 856, -1000, 854, 1188, 1278, 16184, 18920,
	6657, 4298, 383, 1439, -1000, -1000, 1410, -1000, 1087, 18616,
	-1000, -1000, 321, -1000, 1233, -1000, -1000, -1000, -1000, 1368,
	18616, -1000, -1000, 747, 1441, 1139, -1000, 2250, -1000, -1000,
	-1000, -1000, -1000, 290, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10101, 10101, -1000, 10101, 10101, 10101, 908,
	872, 747, 307, -1000, 1212, -1000, -1000, 1125, 18616, 18616,
	-1000, -1000, 990, -1000, -1000, 978, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 976, 976, 976, 444, -1000, -1000, 700,
	15576, 1372, -1000, -1000, -1000, 740, -1000, -1000, 676, 232,
	699, -1000, 18616, -148, 9189, -1000, 1212, 870, 971, 9189,
	1232, 853, -1000, 1059, -1000, 109, -78, -1000, -1000, -1000,
	-1000, -1000, -1000, 1212, -1000, 542, -1000, 542, 1057, 1049,
	16184, 18616, 18920, 1045, 1114, -1000, 284, 1231, -1000, -1000,
	18616, -1000, -1000, -1000, -1000, -1000, 216, 2607, 1229, 1226,
	15880, 1212, 353, 1438, 1428, -1000, -1000, 265, 265, 265,
	265, 181, -1000, -1000, 1477, -1000, 1212, -1000, 1171, 459,
	-1000, 18616, -1000, -1000, -200, -1000, -1000, -1000, -66, 1274,
	1043, 183, -1000, 903, 602, 829, 594, 592, 583, 579,
	550, 546, 544, -1000, -1000, -1000, 1471, -1000, -1000, -1000,
	1468, 1225, -1000, 1223, 870, 9189, 244, 1275, 907, -1000,
	1006, 993, -1000, -1000, -1000, -1000, 972, 1222, 1220, -153,
	848, 16184, 1055, -1000, 214, 2607, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1436, 18616, 18616, 18616, 18616,
	430, 9797, 9189, 15576, 15576, 969, 261, 304, -1000, 9189,
	9189, -1000, -1000, -1000, -1000, 908, 220, -93, 19224, 1113,
	908, 18616, -1000, -1000, -1000, -1000, 18616, -1000, -90, 1043,
	18616, -1000, 826, -1000, -1000, 764, 821, 764, 764, 764,
	764, 764, 374, 374, 18616, 15576, 244, 870, -1000, -40,
	1461, -119, 249, -1000, -1000, -153, 16184, 15576, 1443, 1218,
	966, -74, 18616, 9189, 2543, -1000, 1418, 1109, 11925, -1000,
	-1000, -1000, -1000, 18616, 1458, 1455, 1445, 1442, 1958, 72,
	729, 189, 965, 963, 1267, 959, -1000, 18616, 1217, 747,
	1093, -1000, 1321, -64, -109, 1083, -1000, -1000, 1212, 951,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 660, 660, 949, 947, -1000, 244, -1000, 374,
	374, -1000, -1000, -1000, 173, 851, 809, 779, 772, 51,
	-1000, 1422, 1443, 952, 942, 700, 15880, -153, -1000, -195,
	-1000, 747, -1000, -1000, 2607, 1362, 18616, 211, -1000, -1000,
	1363, -1000, -1000, -1000, -1000, -1000, 2607, 2607, 2607, -1000,
	315, -76, -1000, 261, 1329, 15576, -1000, 1318, -1000, 18616,
	-1000, 1043, -1000, -1000, 330, 700, -1000, -1000, -1000, 771,
	-1000, 719, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15271,
	700, 1443, 700, 1274, 939, 1443, 9189, -219, -1000, -1000,
	12533, 1408, 18616, 2372, -1000, 113, 2010, 194, -1000, 202,
	-1000, -1000, 257, 933, -80, 908, -1000, 18920, 1274, -1000,
	-1000, -1000, 454, 1274, 700, -1000, -1000, -1000, 700, 747,
	627, 1171, -1000, -1000, -1000, 608, 633, -1000, 198, -1000,
	255, -1000, -107, -1000, 1215, -1000, 6657, -1000, -1000, 1274,
	-1000, -1000, 356, 186, -1000, -1000, 1212, -111, 18616, -1000,
	-1000, -1000, 2607, 9493, -1000, 931, 1130, 265, 908, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1709, 19, 1, 1704, 1702, 1700, 1505, 1503, 1496,
	1494, 1698, 1696, 1695, 1694, 1693, 1691, 1690, 1689, 1687,
	1686, 1685, 1684, 1683, 1679, 1677, 1676, 1672, 908, 1671,
	1666, 1665, 106, 1664, 113, 1662, 1661, 82, 205, 88,
	76, 1910, 1660, 52, 116, 144, 1659, 93, 1658, 1656,
	181, 1655, 102, 1654, 1653, 125, 1652, 1651, 37, 23,
	39, 46, 1650, 1649, 107, 71, 1645, 1643, 1642, 26,
	1641, 1640, 97, 18, 28, 29, 40, 1639, 50, 34,
	1638, 94, 1637, 1636, 1633, 1631, 16, 1630, 98, 44,
	14, 11, 1629, 30, 15, 99, 70, 41, 24, 135,
	100, 1628, 65, 103, 78, 1627, 1624, 794, 1623, 1622,
	1621, 1620, 1619, 1615, 759, 749, 1614, 1613, 1612, 91,
	0, 334, 60, 105, 1610, 75, 1609, 2206, 111, 104,
	48, 1607, 84, 209, 66, 1605, 1604, 77, 120, 96,
	115, 108, 1603, 117, 1601, 1600, 1599, 80, 56, 42,
	90, 1598, 1597, 1596, 92, 85, 68, 95, 101, 1595,
	1594, 1593, 1591, 53, 1590, 89, 31, 3, 86, 1589,
	1588, 1586, 1584, 58, 45, 1583, 36, 1580, 21, 6,
	4, 13, 5, 1578, 1577, 1576, 9, 1575, 43, 1574,
	12, 1573, 17, 1572, 1570, 1569, 59, 1568, 1561, 1552,
	32, 1534, 1532, 33, 22, 61, 47, 51, 83, 54,
	1531, 55, 10, 2, 7, 1530, 8, 1529, 1528, 1527,
	25, 27, 1526, 1525, 1519, 1518, 1514, 1513, 49, 1512,
	1511, 1808, 869, 1510, 1509, 1508, 1507, 266,
}

var yyR1 = [...]int{
	0, 229, 230, 230, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 233,
	233, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 217, 217, 216, 218, 218, 12, 12, 12, 12,
	12, 210, 210, 210, 210, 210, 13, 13, 213, 213,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 208, 208,
	208, 209, 209, 209, 211, 211, 212, 212, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 215, 215, 194,
	194, 194, 195, 195, 195, 195, 195, 195, 197, 197,
	198, 198, 125, 125, 192, 192, 191, 190, 190, 189,
	189, 188, 199, 199, 20, 170, 171, 171, 171, 171,
	171, 171, 171, 158, 139, 139, 139, 139, 139, 139,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 205, 205, 205, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 201, 201,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 148, 148, 148, 148, 148, 148,
	200, 200, 196, 196, 196, 196, 196, 196, 196, 143,
	143, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 142, 142, 142, 142, 142, 142, 142, 142, 144,
	144, 144, 144, 144, 144, 144, 144, 140, 140, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 146, 146, 146, 146, 146, 146, 146, 146,
	157, 157, 147, 147, 155, 155, 156, 156, 156, 154,
	154, 154, 151, 151, 152, 152, 153, 153, 153, 149,
	149, 149, 150, 150, 150, 160, 181, 181, 181, 183,
	183, 184, 184, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 169, 169, 207, 207, 180, 180,
	180, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	168, 168, 178, 178, 179, 179, 176, 176, 176, 177,
	163, 163, 163, 163, 163, 164, 165, 165, 165, 165,
	161, 162, 203, 203, 203, 204, 204, 166, 166, 167,
	167, 172, 172, 172, 173, 173, 173, 174, 174, 174,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 234, 234, 235, 235, 235, 235,
	235, 235, 235, 187, 185, 185, 186, 186, 17, 18,
	18, 18, 18, 18, 19, 19, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	112, 112, 109, 109, 110, 110, 111, 111, 111, 113,
	113, 113, 136, 136, 136, 23, 23, 25, 25, 26,
	27, 24, 24, 24, 24, 24, 236, 28, 29, 29,
	30, 30, 30, 34, 34, 34, 32, 32, 33, 33,
	39, 39, 38, 38, 40, 40, 40, 40, 124, 124,
	124, 123, 123, 42, 42, 43, 43, 44, 44, 45,
	45, 45, 220, 220, 219, 219, 221, 221, 221, 221,
	221, 221, 57, 57, 93, 93, 93, 96, 96, 46,
	46, 46, 46, 47, 47, 48, 48, 49, 49, 131,
	131, 130, 130, 130, 129, 129, 51, 51, 51, 53,
	52, 52, 52, 52, 54, 54, 56, 56, 55, 55,
	58, 58, 58, 58, 59, 59, 94, 94, 41, 41,
	41, 41, 41, 41, 41, 108, 108, 61, 61, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 71,
	71, 71, 71, 71, 71, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 37, 37, 72, 72,
	72, 78, 73, 73, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	69, 69, 69, 69, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 237, 237,
	70, 70, 70, 70, 35, 35, 35, 35, 35, 134,
	134, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 138, 82, 82, 36, 36, 80, 80, 81,
	83, 83, 79, 79, 79, 222, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 66, 66, 66, 84,
	84, 85, 85, 86, 86, 87, 87, 88, 89, 89,
	89, 90, 90, 90, 90, 91, 91, 91, 63, 63,
	63, 63, 63, 63, 92, 92, 92, 92, 97, 97,
	74, 74, 76, 76, 75, 77, 98, 98, 102, 99,
	99, 103, 103, 103, 103, 103, 101, 101, 101, 126,
	126, 126, 106, 106, 114, 114, 115, 115, 107, 107,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	117, 117, 117, 118, 118, 121, 121, 122, 122, 127,
	127, 128, 128, 223, 223, 223, 224, 224, 224, 225,
	225, 226, 227, 227, 228, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 231, 232, 132, 133, 133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	6, 5, 5, 5, 11, 11, 9, 5, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 4, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 4, 4, 2, 2, 3, 2,
	3, 2, 7, 9, 3, 3, 6, 9, 9, 8,
	8, 5, 8, 7, 4, 2, 4, 6, 2, 1,
	1, 2, 1, 1, 1, 3, 3, 1, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 2, 1, 2, 1, 1, 1, 1, 4,
	4, 4, 4, 4, 1, 5, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 1, 0, 2,
	5, 2, 3, 3, 2, 3, 2, 2, 3, 4,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 1,
	2, 5, 5, 8, 8, 13, 1, 1, 2, 2,
	10, 7, 0, 1, 1, 0, 3, 0, 1, 1,
	3, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 11, 13, 13, 7, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 0, 4, 1, 3, 1, 1, 1, 1,
	1, 1, 4, 8, 1, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 0, 4, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 3, 3, 1, 1, 1, 1, 2,
	4, 5, 6, 4, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 3, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 1, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -229, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	117, 118, 120, 119, 149, 121, 142, 49, 196, 197,
	199, 200, 26, 143, 144, 147, 148, -231, 8, 303,
	53, -230, 345, -86, 15, -30, 5, -28, -236, -28,
	-28, -28, -28, -28, -170, 53, -125, -199, 158, 295,
	123, 138, 156, 157, 124, 140, 71, -107, 126, 128,
	124, 124, 125, 126, 295, 123, 124, -55, -127, 56,
	-120, 165, 312, 21, 196, 209, 210, 201, 242, 230,
	313, 163, 227, 231, 281, 344, 65, 199, 290, 132,
	169, 145, 222, 225, 224, 216, 213, 28, 248, 319,
	215, 135, 249, 253, 260, 282, 310, 206, 207, 284,
	246, 32, 137, 314, 34, 153, 285, 251, 245, 240,
	244, 205, 239, 38, 219, 255, 254, 256, 280, 233,
	164, 259, 235, 217, 234, 18, 148, 151, 250, 252,
	214, 166, 130, 155, 318, 286, 212, 152, 167, 147,
	289, 335, 162, 200, 283, 208, 292, 37, 266, 226,
	203, 218, 204, 134, 197, 160, 237, 154, 220, 221,
	243, 202, 238, 198, 156, 149, 291, 267, 320, 236,
	232, 228, 229, 161, 126, 158, 159, 273, 274, 275,
	276, 316, 287, 223, 268, 269, 171, 172, 173, 174,
	175, 176, 177, 124, 111, 231, 117, 271, 125, 32,
	155, -136, 124, -109, 159, 273, 274, 275, 276, 56,
	283, 282, 277, -127, 198, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -231, 6, 21, 22,
	-34, 39, 40, -29, -40, 102, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -222, -77,
	-78, 111, 112, 100, 101, 108, 74, 113, -69, -67,
	-68, -70, -225, 58, -121, 57, 66, 59, 60, 61,
	62, 67, 68, 69, 293, -75, -231, 43, 44, 304,
	305, 306, 307, 311, 308, 76, 33, 294, 302, 301,
	300, 298, 299, 296, 297, 343, 129, 295, 106, 303,
	257, -107, -43, -44, -45, -46, -57, -78, -231, -55,
	11, -50, -55, -99, -135, 198, -103, 283, 282, -122,
	293, -101, -121, -119, 281, 231, 280, 56, -120, 122,
	179, 324, 72, 23, 25, 264, 270, 178, 75, 111,
	16, 76, 185, 333, 334, 110, 304, 117, 47, 296,
	297, 294, 183, 306, 307, 295, 271, 190, 20, 29,
	10, 26, 143, 22, 104, 119, 180, 79, 80, 146,
	24, 144, 69, 186, 188, 19, 50, 136, 11, 323,
	13, 14, 337, 325, 129, 128, 91, 336, 125, 45,
	8, 113, 27, 88, 41, 141, 189, 43, 89, 17,
	298, 299, 31, 311, 150, 106, 48, 35, 338, 73,
	339, 67, 51, 288, 184, 71, 15, 46, 340, 138,
	187, 90, 120, 303, 44, 181, 341, 123, 182, 6,
	309, 30, 142, 42, 124, 272, 78, 127, 68, 157,
	5, 140, 9, 49, 52, 300, 301, 302, 33, 77,
	12, 139, 315, 70, -171, -158, 56, -203, 333, 334,
	126, -121, -115, 129, -115, -121, -121, -55, -115, 303,
	124, -55, -55, -114, 129, 56, -114, -114, -114, -55,
	114, -55, 56, 30, 295, 56, 155, 124, 156, 126,
	-133, -231, -122, -133, -133, -133, 160, 161, -133, -110,
	278, 51, -133, -232, 55, -91, 19, 31, -41, -127,
	-87, -88, -41, -86, -2, -28, 35, -32, 22, 64,
	11, -124, 72, 71, 88, -123, 23, -121, 58, 114,
	-41, -62, 91, 73, 89, 90, 75, 97, 96, 107,
	100, 101, 102, 103, 104, 105, 106, 98, 99, 110,
	343, 81, 82, 83, 84, 85, 86, 87, 92, 93,
	94, 95, -108, -231, -78, -231, 115, 116, -65, -65,
	-65, -65, -65, -65, -65, -226, 258, -196, 343, -231,
	58, 114, -2, -73, -41, -231, -231, -231, -231, -231,
	-231, -231, -231, -231, -82, -41, -231, -237, -231, -237,
	-237, -237, -237, -237, -237, -237, -138, 111, 231, 145,
	222, -141, -140, 237, 236, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 230, 313, -231, -231, -231,
	-231, -56, 27, -55, 30, 54, -51, -53, -52, -54,
	41, 45, 47, 42, 43, 44, 48, -131, 23, -43,
	-231, -130, 151, -129, 23, -127, 58, -55, -50, -233,
	54, 11, 52, 54, -99, 198, -100, -104, 284, 286,
	81, 114, -126, -121, 58, 29, 30, 55, 54, -159,
	-139, -143, -140, -145, -144, -146, -121, -141, -142, 230,
	313, 227, 231, 228, 233, 234, 235, 111, 232, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	236, 248, 30, 145, 220, 221, 222, 225, 224, 226,
	223, 249, 250, 251, 252, 253, 254, 255, 256, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 212,
	213, 215, 216, 217, 219, 218, 125, -55, -192, 52,
	56, 73, 56, 51, -208, 51, 19, 178, 179, 23,
	-55, -55, 288, -133, 127, -55, 24, 51, -55, 56,
	56, -128, -127, -119, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -112, 272, 279, -55, 9, 91,
	54, 18, 114, 54, -89, 25, 26, -90, -232, -34,
	-66, -121, 59, 62, -33, 42, -55, -41, -41, -71,
	67, 73, 68, 69, -123, 102, -128, -122, -119, -65,
	-72, -75, -78, 63, 91, 89, 90, 75, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -134, 56, 58, -143, 236, -138, -141,
	212, 213, 215, 216, 217, 219, 218, 56, -64, -121,
	-64, -121, 346, 231, 221, 261, 237, 246, 247, -39,
	22, -73, -38, -41, -40, -122, -232, 54, -232, -2,
	-38, -38, -41, -41, -79, -65, -79, -121, -127, -38,
	-32, -80, -81, 77, -79, -232, 229, -38, -39, -38,
	-38, -95, 151, -55, -98, -102, -79, -44, -45, -45,
	-44, -45, 41, 41, 41, 46, 41, 46, 41, -52,
	-127, -232, -58, 49, 128, 50, -231, -129, -95, 52,
	-43, -55, -103, -100, 54, 285, 287, 288, 51, 70,
	-41, -122, -150, 111, 110, -172, -173, -174, -122, 58,
	59, -158, -160, -163, -161, -162, -175, -164, 132, 130,
	134, 135, 140, -168, 125, 141, 67, 73, -205, 132,
	51, 264, 270, 130, 141, 140, 344, 65, 133, 323,
	325, 29, -153, 346, 258, -151, 267, -147, 53, -147,
	-147, 229, -147, -147, -147, -147, -147, -149, 231, -149,
	-149, -149, -149, 53, 53, -147, -147, -147, -147, -155,
	53, 214, -155, -155, -156, 53, -156, -121, 51, 195,
	23, -190, 315, -191, 56, -133, 24, -133, -55, -211,
	-209, 8, 9, 10, -55, -139, -116, 122, 119, 120,
	-187, 118, 264, 231, 65, 29, 15, 304, 151, 320,
	56, 152, -55, -55, -55, -133, -111, 11, 91, 37,
	-41, -41, -128, -88, -91, -106, 19, 11, 33, 33,
	-38, 67, 68, 69, 114, -231, -72, -65, -65, -65,
	-37, 146, 72, -232, -227, -228, 58, 229, -154, 315,
	316, -232, -38, -232, 54, -41, -232, -232, -232, 54,
	52, 23, 54, 11, 54, 54, 11, 114, -232, -38,
	-83, -81, 79, -41, -232, -232, -232, -232, -232, -63,
	30, 33, -2, -231, -231, -59, 54, 12, 81, -48,
	-47, 51, 52, -49, 51, -47, 41, 41, -220, 315,
	125, 125, 125, -96, -121, -59, -43, -59, -104, -105,
	289, 286, 292, 81, 56, 54, -174, 81, 53, -204,
	51, 73, -166, -121, 141, -168, -168, 56, -168, 56,
	125, 56, 67, 19, -121, 9, 141, 141, -204, 58,
	-55, -201, 324, 16, 53, -206, 53, 58, 59, 60,
	67, -148, 66, -61, 259, -69, 294, 297, 296, 260,
	-121, -127, 347, -152, 268, 59, -149, -149, -147, -149,
	-149, -149, -150, 30, -150, -150, -150, -150, -157, 58,
	-157, -154, -154, 59, -155, 59, 51, 52, -55, -121,
	-2, -189, -188, -122, -194, 23, 51, 54, -208, -132,
	-125, 132, -235, 158, 131, 136, 135, 56, 130, 134,
	151, -193, 158, 131, 132, 136, 135, 56, 125, 141,
	130, 134, 151, 140, -117, -118, 127, 23, 125, 141,
	151, 122, -133, -113, 89, 12, -127, -127, 38, 114,
	-55, -42, 11, 102, -122, -39, -37, 72, -65, -65,
	347, 54, -196, 220, 220, -232, -40, -137, 111, 227,
	145, 222, 216, 246, 247, 233, 266, 220, 267, -134,
	-137, -65, -65, -65, -65, -65, -122, 312, -86, 80,
	-41, 78, -97, 51, -98, -74, -76, -75, -231, -2,
	-92, -121, -96, -86, -102, -41, -41, -41, 53, -41,
	53, -231, -231, -231, -232, 54, -86, -59, 286, 290,
	291, -41, -173, -174, -179, -176, -121, 141, 10, 9,
	19, 136, 130, 344, 56, 56, 56, -203, 140, 335,
	-205, 344, -148, 260, -231, 53, 23, 29, 59, -206,
	53, -196, 343, -196, -231, -147, 53, -147, 53, 53,
	114, 55, -150, -150, -149, -150, -150, -150, 56, 111,
	55, 54, 55, 54, 55, 54, -55, -121, 53, 51,
	54, 81, -195, 19, 166, 167, -55, -209, -211, -234,
	125, 141, -121, -132, -121, -132, -121, -55, -132, -121,
	132, -163, 58, -41, -59, -43, -232, -65, -228, 269,
	269, -232, -147, -147, -147, -156, -147, 207, -147, 207,
	-232, -232, -232, 19, 54, -232, 54, 19, -231, -36,
	309, -41, 28, -97, 54, -232, -232, -232, 54, 114,
	-232, -90, -93, -121, 141, -219, -221, 337, 338, 339,
	340, 341, 342, -93, -93, -93, -130, -121, -90, 55,
	54, -147, -177, 262, -147, -165, 162, 163, 30, 164,
	-165, 335, 141, 141, -231, -203, -204, -41, -93, 53,
	325, 54, 55, -206, -121, 231, 221, 237, 246, -232,
	55, 55, 55, -122, -150, -149, 58, -149, 59, 59,
	53, 52, 51, -178, -179, -69, -121, -55, -188, -174,
	127, 21, 6, 8, 9, 10, 19, 23, -121, 140,
	53, 27, -121, -84, 13, -149, 56, -65, -65, -65,
	-65, -65, -232, 58, 141, -76, 33, -2, -231, -121,
	-121, 54, 55, 55, 54, -232, -232, -232, -58, -181,
	-183, 315, -182, 52, 137, 65, 171, 172, 173, 174,
	175, 176, 177, -176, -89, -204, 51, 67, 165, -204,
	51, -166, -121, -203, -41, -231, -232, 55, -41, 53,
	59, 55, -150, -150, 55, 55, -178, -121, -55, 55,
	53, 53, -167, -121, 180, -212, -214, -7, -9, -8,
	-11, -10, -12, -13, -14, -3, 20, 184, 185, 190,
	186, 139, 129, 53, 53, -93, -231, 130, -85, 14,
	16, -232, -232, -232, -232, -35, 91, 315, 9, -74,
	-2, 114, -121, -221, -220, -180, 51, -182, 315, 53,
	317, 56, -169, 81, 58, 81, 81, 81, 81, 81,
	81, 81, 9, 10, 53, 53, -232, -41, -200, 164,
	51, 55, -202, 55, 55, 55, 53, 53, -94, 336,
	-178, -197, 54, 52, 181, -214, -86, -217, -121, -216,
	-121, -121, -121, -210, 35, 187, 188, 189, -60, -65,
	-41, -60, -179, -179, 55, -185, -186, 151, 141, -41,
	-73, -232, 313, 48, 318, -98, -232, -121, -121, -184,
	-182, -121, 59, -207, 51, 70, 59, -207, -207, -207,
	-207, -207, -165, -165, -167, -179, -200, -232, 310, 10,
	9, 321, 322, 55, 197, 327, 328, 150, 329, 164,
	330, 331, -94, -178, -179, -59, 53, 55, -198, 315,
	-121, -41, -215, -214, 196, -90, 54, -218, -139, 182,
	-121, 11, 11, 11, 11, -214, 196, 78, 196, 55,
	55, -192, -232, 54, -121, 53, 38, 314, 319, -231,
	55, 54, -204, -204, 55, 55, -200, -165, -165, 315,
	59, 16, 59, 59, 59, 59, 328, 150, 330, 16,
	-59, 55, 55, -181, -93, -94, 344, -214, -91, -216,
	-121, 183, 27, -213, -214, -212, -213, -223, 191, 73,
	-190, -186, 33, -179, 38, -121, -182, 133, -181, 59,
	59, 332, -127, -181, -59, -181, -180, 55, -59, -41,
	345, 19, -121, 80, -214, 345, 80, -224, 192, 191,
	153, 55, 315, -232, -55, -180, 114, -180, -181, -181,
	80, -2, 80, 79, 194, 193, 154, 318, 53, -122,
	-180, 129, 196, -231, 319, -167, -213, -65, 150, 55,
	80, -232, -232,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 753, 0, 486, 486, 486, 486, 486, 486, 0,
	-2, 808, 0, 0, 0, 0, -2, 476, 477, 0,
	479, 480, 1104, 1104, 1104, 1104, 1104, 0, 33, 34,
	1102, 1, 3, 761, 0, 0, 490, 493, 488, 839,
	808, 0, 0, 0, 84, 146, 372, 0, 0, 806,
	806, 0, 0, 0, 806, 133, 0, 0, 0, 809,
	0, 804, 0, 804, 804, 804, 0, 435, 568, 829,
	830, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 0, 0, 0, 0, 1105, 1105, 1105,
	1105, 0, 1105, 464, 453, 455, 456, 457, 458, 1105,
	473, 474, 463, 475, 478, 481, 482, 483, 484, 485,
	27, 765, 839, 839, 753, 29, 0, 486, 491, 492,
	496, 494, 495, 487, 0, 504, 508, 0, 578, 839,
	583, 585, -2, -2, 0, 624, 625, 626, 627, 628,
	629, 839, 839, 839, 839, 839, 839, 839, 655, 656,
	657, 658, 0, 222, 732, 739, 740, 741, 742, 743,
	744, 745, 587, 588, 0, 785, 839, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 688, 688, 688,
	688, 688, 688, 688, 688, 0, 0, 0, 0, 0,
	840, 0, 0, 515, 517, 518, 519, 549, 0, 551,
	0, 0, 41, 45, 0, 1072, 789, -2, -2, 0,
	0, 0, 827, 828, -2, 982, -2, 825, 826, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 0, 147, 0, 0, 373, 374,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 143,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 434,
	0, 436, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
	445, 1106, 1107, 446, 447, 448, 1105, 1105, 450, 0,
	465, 0, 459, 28, 1103, 22, 0, 0, 762, 0,
	754, 755, 758, 761, 27, 493, 0, 498, 497, 489,
	0, 505, 839, 839, 0, 509, 0, 511, 512, 0,
	581, 839, 0, 0, 839, 839, 839, 839, 839, 839,
	839, 839, 839, 839, 839, 839, 839, 839, 839, 0,
	0, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 584, 0, 598, 0, 0, 0, 646, 647,
	648, 649, 650, 651, 0, 659, 0, 737, 0, -2,
	738, 0, 27, 0, 622, 839, 839, 839, 839, 839,
	839, 0, 839, 496, 0, 724, 0, 679, 0, 680,
	681, 682, 683, 684, 685, 686, 687, 715, 0, 717,
	718, 719, 720, 721, 722, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 257, 258, 839, -2, 839,
	839, 43, 0, 567, 0, 0, 0, 0, 0, 0,
	556, 0, 0, 559, 0, 0, 0, 0, 550, 0,
	0, 570, 1036, 552, 0, 554, 555, -2, 0, 0,
	0, 39, 40, 0, 46, 1072, 48, 73, 0, 0,
	839, 0, 312, 799, 800, 801, 797, 381, 0, 153,
	306, 302, 155, 156, 157, 158, 159, 292, 230, 257,
	258, 292, 292, 292, 292, 292, 264, 292, 292, 309,
	309, 309, 309, 309, 273, 274, 275, 276, 277, 278,
	279, 997, 0, 249, 292, 292, 292, 253, 292, 255,
	256, 282, 283, 284, 285, 286, 287, 288, 289, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 294,
	294, 294, 296, 296, 247, 248, 0, 0, 137, 0,
	1105, 0, 1105, 0, 0, 0, 98, 99, 100, 0,
	144, 0, 0, 401, 0, 429, 805, 0, 1105, 432,
	433, 569, 831, 832, 437, 438, 439, 440, 441, 442,
	443, 444, 449, 452, 466, 460, 461, 454, 766, 0,
	839, 839, 0, 839, 757, 759, 760, 765, 30, 496,
	0, 746, 0, 0, 839, 499, 25, 579, 580, 582,
	599, 0, 601, 603, 510, 506, 0, 733, -2, 589,
	590, 618, 619, 620, 0, 839, 839, 839, 616, 594,
	0, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 641, 644, 699, 700, 645, 653, 654, 292,
	294, 294, 294, 296, 296, 247, 248, 0, 642, 0,
	643, 652, 0, 0, 299, 225, 226, 227, 228, 0,
	839, 0, 501, 508, 502, 735, 621, 839, 784, 27,
	0, 0, 0, 0, 626, 0, 0, 732, 0, 0,
	839, 730, 727, 839, 0, 689, 716, 0, 0, 0,
	0, 0, 0, 566, 574, 786, 0, 516, 545, 547,
	0, 542, 557, 558, 560, 0, 562, 0, 564, 565,
	520, 521, 522, 0, 0, 0, 0, 553, 574, 0,
	574, 42, 790, 47, 0, 0, 76, 77, 791, 792,
	793, 0, 795, 313, 0, 145, 382, 384, 387, 388,
	389, 148, 149, 150, 151, 152, 0, 375, 377, 0,
	0, 0, 0, 0, 350, 351, 161, 0, 163, 0,
	0, 166, 167, 0, 169, 171, 375, 0, 0, 0,
	0, 0, 160, 0, 308, 304, 303, 229, 0, 309,
	309, 292, 309, 309, 309, 266, 267, 312, 0, 312,
	312, 312, 312, 0, 0, 299, 299, 252, 254, 241,
	0, 294, 243, 244, 245, 0, 246, 0, 0, 0,
	0, 91, 0, 135, 136, 92, 807, 93, 119, 0,
	104, 101, 102, 103, 0, 97, 1104, 132, 0, 820,
	402, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 0, 0, 428, 1105, 431, 469, 0, 0, 0,
	763, 764, 0, 756, 23, 0, 802, 803, 747, 748,
	513, 600, 602, 604, 0, -2, 591, 616, 595, 0,
	592, 839, 839, 586, 0, 842, 222, 223, 224, 0,
	0, 660, 0, 663, 839, 623, -2, 664, 665, 0,
	0, 0, 839, 839, 839, 839, 839, 0, 0, 753,
	0, 728, 839, 0, 678, 690, 691, 692, 693, 778,
	0, 0, -2, 0, 0, 753, 0, 839, 839, 539,
	546, 839, 0, 540, 839, 541, 561, 563, 532, 0,
	0, 0, 0, 0, 537, 753, 574, 38, 74, 75,
	0, 0, 81, 839, 314, 0, 385, 0, 0, 360,
	0, 0, 0, 378, 341, 0, 0, 344, 0, 346,
	-2, 372, 162, 0, 0, 0, 168, 170, 0, 174,
	175, 0, 198, 0, 0, 185, 0, 222, 189, 190,
	222, 192, 193, 194, 1030, 197, 292, 292, 218, 1003,
	0, 0, 307, 154, 305, 0, 312, 312, 309, 312,
	312, 312, 268, 0, 269, 270, 271, 272, 0, 290,
	0, 250, 251, 0, 242, 0, 0, 0, 0, 0,
	-2, 138, 139, 0, 122, 0, 0, 0, 0, 390,
	0, 0, 1104, 0, 416, 417, 418, 419, 420, 421,
	422, 1104, 0, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 412, 413, 0, 1104, 821, 822, 823, 824,
	0, 0, 430, 451, 0, 839, 467, 468, 767, 0,
	24, 574, 0, 507, 734, 0, 593, 839, 617, 596,
	841, 0, 844, 0, 0, 661, 503, 0, 292, 292,
	704, 292, 296, 707, 708, 292, 710, 292, 713, 0,
	0, 0, 0, 0, 0, 0, 733, 0, 725, 677,
	731, 839, 31, 0, 778, 768, 780, 782, 839, 27,
	0, 774, 0, 761, 787, 575, 788, 543, 0, 548,
	0, 0, 0, 0, 551, 0, 761, 37, 78, 79,
	80, 794, 383, 386, 0, 354, 292, 292, 0, 0,
	0, 0, 0, 0, 342, 343, 345, 348, 372, 184,
	164, 375, 165, 0, 839, 0, 0, 199, 0, 0,
	0, 188, 0, 191, 0, 214, 0, 216, 0, 0,
	0, 293, 259, 260, 312, 261, 262, 263, 310, 311,
	309, 0, 309, 0, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 121, 0, 105, 0, 0,
	414, 415, 0, 395, 0, 396, 398, 399, 400, 0,
	377, 394, 470, 471, 749, 514, 662, 597, 843, 300,
	301, 666, 701, 309, 705, 706, 709, 711, 712, 714,
	668, 667, 669, 839, 839, 672, 839, 839, 839, 0,
	0, 729, 0, 32, 0, 783, -2, 0, 0, 0,
	44, 35, 0, 534, 535, 0, 524, 526, 527, 528,
	529, 530, 531, 0, 0, 0, 570, 538, 36, 316,
	0, 758, 358, 359, 357, 375, 366, 367, 0, 0,
	375, 376, 377, 372, 839, 349, 0, 0, 0, 839,
	181, 0, 186, 0, 196, 982, 299, 226, 227, 195,
	215, 217, 219, 0, 265, 312, 291, 312, 0, 0,
	0, 0, 0, 0, 352, 353, 292, 0, 140, 141,
	0, 123, 124, 125, 126, 127, 0, 0, 0, 0,
	0, 0, 378, 751, 0, 702, 703, 0, 0, 0,
	0, 694, 676, 726, 0, 781, 0, -2, 0, 776,
	775, 0, 544, 523, 0, 571, 572, 573, 522, 338,
	317, 0, 319, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 356, 361, 0, 368, 369, 362,
	0, 0, 378, 0, 0, 839, 220, 176, 0, 200,
	0, 0, 280, 281, 295, 298, 0, 0, 0, 576,
	1102, 0, 128, 379, 0, 96, 106, 108, 109, 110,
	111, 112, 113, 114, 115, 753, 0, 0, 0, 0,
	61, 839, 839, 0, 0, 0, 0, 0, 26, 839,
	839, 671, 670, 673, 674, 0, 0, 0, 0, 771,
	27, 0, 536, 525, 533, 315, 0, 320, 0, 0,
	0, 323, 0, 335, 325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 172, 0,
	0, 0, 0, 183, 187, 576, 0, 0, 574, 0,
	0, 130, 0, 839, 0, 107, 761, 49, 54, 51,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 578, 0, 0, 134, 0, 424, 0, 0, 752,
	750, 675, 0, 0, 0, 779, -2, 777, 339, 0,
	321, 326, 324, 327, 336, 337, 328, 329, 330, 331,
	332, 333, 375, 375, 0, 0, 371, 220, 221, 0,
	0, 179, 180, 182, 0, 0, 0, 0, 0, 0,
	211, 0, 574, 0, 0, 316, 0, 576, 94, 0,
	380, 129, 95, 117, 0, 765, 0, 0, 53, 55,
	59, 62, 63, 64, 65, 66, 0, 0, 0, 391,
	833, 137, 423, 0, 0, 0, 695, 0, 698, 0,
	318, 0, 363, 364, 0, 316, 173, 177, 178, 0,
	202, 0, 204, 205, 206, 207, 208, 209, 210, 0,
	316, 574, 316, 338, 0, 574, 839, 0, 116, 52,
	0, 0, 0, 0, 68, 0, 0, 836, 834, 0,
	397, 425, 0, 0, 696, 0, 322, 0, 338, 201,
	203, 212, 0, 338, 316, 88, 86, 577, 316, 131,
	0, 0, 60, 67, 69, 0, 71, 393, 0, 835,
	0, 392, 0, 340, 0, 370, 0, 85, 89, 338,
	118, -2, 0, 0, 837, 838, 0, 0, 0, 213,
	87, 70, 0, 839, 697, 0, 0, 0, 0, 365,
	72, 426, 427,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 105, 97, 3,
	53, 55, 102, 100, 54, 101, 114, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 345,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 346, 3, 347, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:383
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:388
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:389
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:393
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:416
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:424
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:428
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:434
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:441
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:447
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:451
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:461
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:468
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:480
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:492
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:502
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:508
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:512
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:516
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:521
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:522
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:530
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:535
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:539
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:545
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:549
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:553
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:557
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:563
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:567
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:580
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:584
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:590
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:595
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:605
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:612
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:626
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:634
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:644
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:660
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:666
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:673
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:683
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:687
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:694
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:703
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:711
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:722
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:726
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:732
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:736
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:740
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:746
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:750
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:754
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:758
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:764
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:768
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:779
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:799
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:819
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:840
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:856
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:872
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:880
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:888
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:892
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:896
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:908
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 96:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:919
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:930
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:942
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:946
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:950
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:970
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:974
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:980
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:984
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:990
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1001
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1013
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1020
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1024
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1028
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1033
		{
			yyVAL.bytes = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1037
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1045
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1049
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1053
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1058
		{
			yyVAL.expr = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1062
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1067
		{
			yyVAL.expr = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1071
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1076
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1085
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1089
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1095
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1100
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1105
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1111
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1116
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1122
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1127
		{
			yyVAL.bytes = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1131
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1137
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1144
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1150
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1154
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1159
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1163
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1171
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1175
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1181
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1187
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1198
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1204
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1216
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1221
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1226
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1231
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1236
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1241
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1246
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1251
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1256
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1261
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1266
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1271
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1280
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1290
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1295
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1300
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1307
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1314
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1322
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1327
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1333
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1339
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1345
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1351
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1358
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1362
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1366
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1372
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1376
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1380
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1384
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1388
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1392
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1396
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1400
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1404
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1408
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1414
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1418
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1423
		{
			yyVAL.sequence = &Sequence{}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1427
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1432
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1437
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1442
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1447
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1452
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1457
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1467
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1472
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1477
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1482
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1487
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1494
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1498
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1502
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1510
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1514
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1519
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1523
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1528
		{
			yyVAL.bytes = nil
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1540
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1545
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1812
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1817
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1822
		{
			yyVAL.optVal = nil
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1826
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1831
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1835
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1843
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1847
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1853
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1861
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1865
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1869
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1874
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1878
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1883
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1887
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1892
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1896
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1900
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1905
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1909
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1913
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1918
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1922
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1926
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1932
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1937
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1941
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1945
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1951
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1955
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1961
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1965
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1971
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1975
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1980
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1984
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1988
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1992
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1996
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2000
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2004
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2008
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2012
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2018
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2022
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2028
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2032
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2038
		{
			yyVAL.indexPartition = nil
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2042
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2046
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2052
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2056
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2060
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2064
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2068
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2072
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2076
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2080
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2084
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2090
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2094
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2100
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2105
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2111
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2115
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2121
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2126
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2130
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2140
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2145
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2152
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 363:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2159
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 364:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2166
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 365:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2175
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2187
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2191
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2195
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2199
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 370:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2205
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 371:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2216
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2226
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2230
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2234
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2240
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2244
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2249
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2256
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2260
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2265
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2269
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2273
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2281
		{
			yyVAL.str = yyDollar[1].str
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2285
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2289
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2295
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2299
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2303
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2309
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 391:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2313
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 392:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2327
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 393:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2341
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2360
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2369
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2373
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 397:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2377
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2390
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2400
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2405
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2410
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2414
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 423:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2446
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2452
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2456
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 426:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2462
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 427:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2466
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2472
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2478
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 430:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2486
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2491
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2499
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2503
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2509
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2513
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2518
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2524
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2528
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2537
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2545
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2553
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2573
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2581
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2591
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2599
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2625
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2641
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2645
		{
			yyVAL.str = "extended "
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2651
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2655
		{
			yyVAL.str = "full "
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2661
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2665
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2669
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2675
		{
			yyVAL.showFilter = nil
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2679
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2683
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2689
		{
			yyVAL.str = ""
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2693
		{
			yyVAL.str = SessionStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2697
		{
			yyVAL.str = GlobalStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2703
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2707
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2713
		{
			yyVAL.statement = &Begin{}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2717
		{
			yyVAL.statement = &Begin{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2723
		{
			yyVAL.statement = &Commit{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2729
		{
			yyVAL.statement = &Rollback{}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2735
		{
			yyVAL.statement = &OtherRead{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2739
		{
			yyVAL.statement = &OtherRead{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2743
		{
			yyVAL.statement = &OtherRead{}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2747
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2751
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2756
		{
			setAllowComments(yylex, true)
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2760
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2766
		{
			yyVAL.bytes2 = nil
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2770
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2776
		{
			yyVAL.str = UnionStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2780
		{
			yyVAL.str = UnionAllStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2784
		{
			yyVAL.str = UnionDistinctStr
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2789
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2793
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2797
		{
			yyVAL.str = SQLCacheStr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2802
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2806
		{
			yyVAL.str = DistinctStr
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2811
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2815
		{
			yyVAL.str = StraightJoinHint
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2820
		{
			yyVAL.selectExprs = nil
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2824
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2830
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2834
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2840
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2844
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2848
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2852
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2857
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2861
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2865
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2872
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2877
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2881
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2887
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2891
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2901
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2905
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2909
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2914
		{
			yyVAL.strs = []string{}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2918
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2924
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2928
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2934
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2938
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2942
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2946
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2950
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2960
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 533:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2964
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2970
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2975
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2979
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2985
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2989
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3002
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3006
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3010
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3014
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3020
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3022
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3026
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3028
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3032
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3034
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3037
		{
			yyVAL.empty = struct{}{}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3039
		{
			yyVAL.empty = struct{}{}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3042
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3046
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3050
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3057
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3063
		{
			yyVAL.str = JoinStr
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3067
		{
			yyVAL.str = JoinStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3071
		{
			yyVAL.str = JoinStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.str = StraightJoinStr
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3083
		{
			yyVAL.str = LeftJoinStr
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3087
		{
			yyVAL.str = LeftJoinStr
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3091
		{
			yyVAL.str = RightJoinStr
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3095
		{
			yyVAL.str = RightJoinStr
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3101
		{
			yyVAL.str = NaturalJoinStr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3105
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3115
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3119
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3125
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3129
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3134
		{
			yyVAL.indexHints = nil
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3138
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3142
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3146
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3151
		{
			yyVAL.expr = nil
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3155
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3160
		{
			yyVAL.columns = nil
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3164
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3170
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3174
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3178
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3182
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3186
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3190
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3194
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3200
		{
			yyVAL.str = ""
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3204
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3210
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3214
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3220
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3224
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3228
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3232
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3236
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3240
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3244
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3248
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3252
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3256
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3262
		{
			yyVAL.str = IsNullStr
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3266
		{
			yyVAL.str = IsNotNullStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3270
		{
			yyVAL.str = IsTrueStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3274
		{
			yyVAL.str = IsNotTrueStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3278
		{
			yyVAL.str = IsFalseStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3282
		{
			yyVAL.str = IsNotFalseStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3288
		{
			yyVAL.str = EqualStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3292
		{
			yyVAL.str = LessThanStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3296
		{
			yyVAL.str = GreaterThanStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3300
		{
			yyVAL.str = LessEqualStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3304
		{
			yyVAL.str = GreaterEqualStr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3308
		{
			yyVAL.str = NotEqualStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3312
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3316
		{
			yyVAL.str = PosixRegexStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3320
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3324
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3328
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3333
		{
			yyVAL.expr = nil
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3337
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3343
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3347
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3351
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3357
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3363
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3367
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3373
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3377
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3381
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3385
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3389
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3393
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3397
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3401
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3405
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3409
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3413
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3417
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3421
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3425
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3429
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3433
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3437
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3441
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3445
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3453
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3457
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3461
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3465
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3469
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3477
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3491
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3495
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3499
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3507
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: &ConvertType{Type: string(yyDollar[3].bytes)}}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3511
		{
			yyVAL.expr = &TypeCastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3519
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3529
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3533
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3537
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3541
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3559
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3563
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3567
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 669:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3571
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 670:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3575
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 671:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3579
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3583
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 673:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3587
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 674:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3591
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 675:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3595
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 676:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3599
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3603
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3607
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3617
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3625
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3629
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3634
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3653
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3675
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3679
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3685
		{
			yyVAL.str = ""
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3689
		{
			yyVAL.str = BooleanModeStr
		}
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3693
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 697:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3697
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3701
		{
			yyVAL.str = QueryExpansionStr
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3707
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3711
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3721
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3777
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3793
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3797
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3810
		{
			yyVAL.expr = nil
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3814
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3819
		{
			yyVAL.str = string("")
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3823
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3829
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3833
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3839
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3844
		{
			yyVAL.expr = nil
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3848
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3854
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3858
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3862
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3868
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3874
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3878
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3883
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3888
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3892
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3896
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3900
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3904
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3908
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3912
		{
			yyVAL.expr = &NullVal{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3918
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3927
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3931
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3936
		{
			yyVAL.exprs = nil
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3940
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3945
		{
			yyVAL.expr = nil
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3949
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3954
		{
			yyVAL.orderBy = nil
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3958
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3964
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3968
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3974
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3979
		{
			yyVAL.str = AscScr
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3983
		{
			yyVAL.str = AscScr
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3987
		{
			yyVAL.str = DescScr
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3992
		{
			yyVAL.limit = nil
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3996
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4000
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4004
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4009
		{
			yyVAL.str = ""
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4013
		{
			yyVAL.str = ForUpdateStr
		}
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4017
		{
			yyVAL.str = ShareModeStr
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4030
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4034
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4038
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 771:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4043
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4047
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 773:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4051
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4058
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4062
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4066
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4070
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4075
		{
			yyVAL.updateExprs = nil
		}
	case 779:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4079
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4085
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4089
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4095
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4099
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4105
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4111
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4121
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4125
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4131
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4137
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4141
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4147
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4151
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4155
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4160
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4164
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4171
		{
			yyVAL.bytes = []byte("charset")
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4178
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4182
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4186
		{
			yyVAL.expr = &Default{}
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4195
		{
			yyVAL.byt = 0
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4197
		{
			yyVAL.byt = 1
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4200
		{
			yyVAL.empty = struct{}{}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4202
		{
			yyVAL.empty = struct{}{}
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4205
		{
			yyVAL.str = ""
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4207
		{
			yyVAL.str = IgnoreStr
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4211
		{
			yyVAL.empty = struct{}{}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4213
		{
			yyVAL.empty = struct{}{}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4215
		{
			yyVAL.empty = struct{}{}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4217
		{
			yyVAL.empty = struct{}{}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4219
		{
			yyVAL.empty = struct{}{}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4221
		{
			yyVAL.empty = struct{}{}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4223
		{
			yyVAL.empty = struct{}{}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4225
		{
			yyVAL.empty = struct{}{}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4227
		{
			yyVAL.empty = struct{}{}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4229
		{
			yyVAL.empty = struct{}{}
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4232
		{
			yyVAL.empty = struct{}{}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4234
		{
			yyVAL.empty = struct{}{}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4236
		{
			yyVAL.empty = struct{}{}
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4240
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4242
		{
			yyVAL.empty = struct{}{}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4246
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4250
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4257
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4263
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4267
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4274
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4280
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4284
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4288
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4294
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4298
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4302
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4308
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4312
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4319
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4326
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4330
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4337
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4620
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4629
		{
			decNesting(yylex)
		}
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4634
		{
			forceEOF(yylex)
		}
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4639
		{
			forceEOF(yylex)
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4643
		{
			forceEOF(yylex)
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4647
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
