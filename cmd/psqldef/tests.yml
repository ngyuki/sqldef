CreateTable:
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text,
      age integer
    );
    CREATE TABLE bigdata (
      data bigint
    );
DropTable:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text,
      age integer
    );
    CREATE TABLE bigdata (
      data bigint
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text,
      age integer
    );
  output: |
    DROP TABLE "public"."bigdata";
EmptyTable:
  desired: |
    CREATE TABLE public.test ();
CreateTableWithDefault:
  desired: |
    CREATE TABLE users (
      profile character varying(50) NOT NULL DEFAULT ''::character varying,
      default_int int default 20,
      default_bool bool default true,
      default_numeric numeric(5) default 42.195,
      default_fixed_char character(3) default 'JPN'::bpchar,
      default_text text default ''::text,
      default_json json default '[]'::json,
      default_jsonb jsonb default '[]'::jsonb,
      default_current_timestamp timestamp default CURRENT_TIMESTAMP,
      default_current_date date default CURRENT_DATE,
      default_current_time time default CURRENT_TIME,
      joined_at timestamp with time zone NOT NULL DEFAULT '0001-01-01 00:00:00'::timestamp without time zone,
      created_at timestamp with time zone DEFAULT now()
    );
CreateTableChangeDefaultBoolean:
  current: |
    CREATE TABLE test (
      col boolean default true
    );
  desired: |
    CREATE TABLE test (
      col boolean default false
    );
  output: |
    ALTER TABLE "public"."test" ALTER COLUMN "col" SET DEFAULT false;
CastBpchar:
  desired: |
    CREATE TABLE public.dummy_table (
      "col" character(30)
    );
    CREATE VIEW public.dummy_view AS SELECT dummy_table.col FROM dummy_table WHERE (dummy_table.col <> 'dummy value'::bpchar);
ParseTextCheckConstraint:
  current: |
    CREATE TABLE test (
      col text NOT NULL CHECK (col <> ''::text)
    );
  desired: |
    CREATE TABLE test (
      col text NOT NULL
    );
  output: |
    ALTER TABLE "public"."test" DROP CONSTRAINT test_col_check;
NullCast:
  desired: |
    CREATE TABLE public.test (
      "item" character varying(16) DEFAULT NULL
    );
NumericCast:
  desired: |
    CREATE TABLE public.test_table (
      "item" numeric
    );
    CREATE VIEW public.test_view AS SELECT t.item FROM test_table t WHERE (t.item = (0)::numeric);
CreateIndexConcurrently:
  current: |
    CREATE TABLE users (
      id BIGINT NOT NULL PRIMARY KEY,
      name VARCHAR(128) DEFAULT 'konsumer'
    );
  desired: |
    CREATE TABLE users (
      id BIGINT NOT NULL PRIMARY KEY,
      name VARCHAR(128) DEFAULT 'konsumer'
    );
    CREATE INDEX CONCURRENTLY username on users (name);
  output: |
    CREATE INDEX CONCURRENTLY username on users (name);
AlterTypeAddValue:
  current: |
    CREATE TYPE eventtype AS ENUM (
      'example',
      'send_message'
    );

    CREATE TABLE events (
      id UUID NOT NULL PRIMARY KEY,
      event_type eventtype NOT NULL
    );
  desired: |
    CREATE TYPE eventtype AS ENUM (
      'example',
      'send_message',
      'send_meeting_options',
      'update_reactionslot'
    );

    CREATE TABLE events (
      id UUID NOT NULL PRIMARY KEY,
      event_type eventtype NOT NULL
    );
  output: |
    ALTER TYPE public.eventtype ADD VALUE 'send_meeting_options';
    ALTER TYPE public.eventtype ADD VALUE 'update_reactionslot';
  min_version: '12'
UUIDCast:
  desired: |
    CREATE TABLE public.test_table (
      "id" uuid NOT NULL,
      "tenant_id" uuid NOT NULL,
      PRIMARY KEY ("id", "tenant_id")
    );
    CREATE POLICY tenant_isolation_policy ON test_table AS PERMISSIVE FOR ALL TO public
    USING (current_schema()::uuid = current_database()::uuid);
CreateIndexWithoutName:
  desired: |
    CREATE TABLE "user" (id BIGINT NOT NULL);
    CREATE INDEX ON "user" (id);
TypeColumn:
  desired: |
    CREATE TABLE "public"."test_table" (
      "id" bigint NOT NULL,
      "type" character varying(10)
    );
    CREATE VIEW public.test_view AS SELECT test_table.id, test_table."type" FROM test_table;
PosixRegexCheckConstraint:
  current: |
    CREATE TABLE test (
      posix_regex        text NOT NULL CHECK (posix_regex        ~   '[0-9]'),
      posix_regex_ci     text NOT NULL CHECK (posix_regex_ci     ~*  '[0-9]'),
      posix_not_regex    text NOT NULL CHECK (posix_not_regex    !~  '[0-9]'),
      posix_not_regex_ci text NOT NULL CHECK (posix_not_regex_ci !~* '[0-9]')
    );
  desired: |
    CREATE TABLE test (
      posix_regex        text NOT NULL CHECK (posix_regex        ~   '[a-z]'),
      posix_regex_ci     text NOT NULL CHECK (posix_regex_ci     ~*  '[a-z]'),
      posix_not_regex    text NOT NULL CHECK (posix_not_regex    !~  '[a-z]'),
      posix_not_regex_ci text NOT NULL CHECK (posix_not_regex_ci !~* '[a-z]')
    );
  output: |
    ALTER TABLE "public"."test" DROP CONSTRAINT test_posix_regex_check;
    ALTER TABLE "public"."test" ADD CONSTRAINT test_posix_regex_check CHECK (posix_regex ~ '[a-z]');
    ALTER TABLE "public"."test" DROP CONSTRAINT test_posix_regex_ci_check;
    ALTER TABLE "public"."test" ADD CONSTRAINT test_posix_regex_ci_check CHECK (posix_regex_ci ~* '[a-z]');
    ALTER TABLE "public"."test" DROP CONSTRAINT test_posix_not_regex_check;
    ALTER TABLE "public"."test" ADD CONSTRAINT test_posix_not_regex_check CHECK (posix_not_regex !~ '[a-z]');
    ALTER TABLE "public"."test" DROP CONSTRAINT test_posix_not_regex_ci_check;
    ALTER TABLE "public"."test" ADD CONSTRAINT test_posix_not_regex_ci_check CHECK (posix_not_regex_ci !~* '[a-z]');
ForeignKeyOnReservedName:
  current: |
    CREATE TABLE "public"."variables" (
      "id" character varying(100) NOT NULL,
      "compaby_id" character varying(100) NOT NULL,
      PRIMARY KEY ("id")
    );

    CREATE TABLE "public"."users" (
      "id" character varying(100) NOT NULL,
      "variable_id" character varying(100) NOT NULL,
      "name" character varying(100),
      PRIMARY KEY ("id")
    );
  desired: |
    CREATE TABLE IF NOT EXISTS variables (
      id VARCHAR(100) PRIMARY KEY,
      compaby_id VARCHAR(100) NOT NULL REFERENCES companies(id)
    );

    CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(100) PRIMARY KEY,
        variable_id VARCHAR(100) NOT NULL,
        name VARCHAR(100),
        CONSTRAINT users_variable_id_fk FOREIGN KEY (variable_id) REFERENCES variables(id)
    );
  output: |
    ALTER TABLE "public"."users" ADD CONSTRAINT "users_variable_id_fk" FOREIGN KEY ("variable_id") REFERENCES "public"."variables" ("id");
NumericChangePrecisionAndScale:
  current: |
    CREATE TABLE test (
      num numeric (10, 3)
    );
  desired: |
    CREATE TABLE test (
      num numeric (10, 2)
    );
  output: |
    ALTER TABLE "public"."test" ALTER COLUMN "num" TYPE numeric(10, 2);
TypecastVarcharFieldWithCheckConstraint:
  current: |
    CREATE TABLE test (
      v varchar(10) NOT NULL,
      t text NOT NULL
    );
  desired: |
    CREATE TABLE test (
      v varchar(10) NOT NULL CHECK (v::text ~ '[0-9]'),
      t text NOT NULL CHECK (t ~ '[0-9]')
    );
  output: |
    ALTER TABLE "public"."test" ADD CONSTRAINT test_v_check CHECK (v::text ~ '[0-9]');
    ALTER TABLE "public"."test" ADD CONSTRAINT test_t_check CHECK (t ~ '[0-9]');
